syntax = "proto3";
package world;

import "types.proto";
import "google/protobuf/empty.proto";


// The World service provides information about the world.
service World {
    // Subscribes to updates about contracts. Like the head block number, tps, etc.
    rpc SubscribeContracts (SubscribeContractsRequest) returns (stream SubscribeContractsResponse);

    // Retrieves metadata about the World including all the registered components and systems.
    rpc Worlds (WorldsRequest) returns (WorldsResponse);
   
    // Subscribe to entity updates.
    rpc SubscribeEntities (SubscribeEntitiesRequest) returns (stream SubscribeEntityResponse);

    // Update entity subscription
    rpc UpdateEntitiesSubscription (UpdateEntitiesSubscriptionRequest) returns (google.protobuf.Empty);

    // Retrieve entities
    rpc RetrieveEntities (RetrieveEntitiesRequest) returns (RetrieveEntitiesResponse);

    // Subscribe to entity updates.
    rpc SubscribeEventMessages (SubscribeEntitiesRequest) returns (stream SubscribeEntityResponse);

    // Update entity subscription
    rpc UpdateEventMessagesSubscription (UpdateEntitiesSubscriptionRequest) returns (google.protobuf.Empty);

    // Subscribe to token balance updates.
    rpc SubscribeTokenBalances (SubscribeTokenBalancesRequest) returns (stream SubscribeTokenBalancesResponse);

    // Update token balance subscription
    rpc UpdateTokenBalancesSubscription (UpdateTokenBalancesSubscriptionRequest) returns (google.protobuf.Empty);

    // Subscribe to token updates.
    rpc SubscribeTokens (SubscribeTokensRequest) returns (stream SubscribeTokensResponse);

    // Update token subscription
    rpc UpdateTokensSubscription (UpdateTokenSubscriptionRequest) returns (google.protobuf.Empty);

    // Subscribe to token transfer updates.
    rpc SubscribeTokenTransfers (SubscribeTokenTransfersRequest) returns (stream SubscribeTokenTransfersResponse);

    // Update token transfer subscription
    rpc UpdateTokenTransfersSubscription (UpdateTokenTransfersSubscriptionRequest) returns (google.protobuf.Empty);

    // Retrieve entities
    rpc RetrieveEventMessages (RetrieveEntitiesRequest) returns (RetrieveEntitiesResponse);

    // Retrieve events
    rpc RetrieveEvents (RetrieveEventsRequest) returns (RetrieveEventsResponse);

    // Subscribe to events
    rpc SubscribeEvents (SubscribeEventsRequest) returns (stream SubscribeEventsResponse);

    // Retrieve tokens
    rpc RetrieveTokens (RetrieveTokensRequest) returns (RetrieveTokensResponse);

    // Retrieve token transfers
    rpc RetrieveTokenTransfers (RetrieveTokenTransfersRequest) returns (RetrieveTokenTransfersResponse);

    // Retrieve token balances
    rpc RetrieveTokenBalances (RetrieveTokenBalancesRequest) returns (RetrieveTokenBalancesResponse);

    // Retrieve transactions
    rpc RetrieveTransactions (RetrieveTransactionsRequest) returns (RetrieveTransactionsResponse);

    // Subscribe to transactions
    rpc SubscribeTransactions (SubscribeTransactionsRequest) returns (stream SubscribeTransactionsResponse);

    // Retrieve controllers
    rpc RetrieveControllers (RetrieveControllersRequest) returns (RetrieveControllersResponse);

    // Retrieve contracts
    rpc RetrieveContracts (RetrieveContractsRequest) returns (RetrieveContractsResponse);

    // Retrieve token contracts
    rpc RetrieveTokenContracts (RetrieveTokenContractsRequest) returns (RetrieveTokenContractsResponse);

    // Retrieve aggregations (leaderboards, stats, rankings)
    rpc RetrieveAggregations (RetrieveAggregationsRequest) returns (RetrieveAggregationsResponse);

    // Subscribe to aggregation updates (leaderboards, stats, rankings)
    rpc SubscribeAggregations (SubscribeAggregationsRequest) returns (stream SubscribeAggregationsResponse);

    // Update an aggregations subscription
    rpc UpdateAggregationsSubscription (UpdateAggregationsSubscriptionRequest) returns (UpdateAggregationsSubscriptionResponse);

    // Retrieve activities (user session tracking)
    rpc RetrieveActivities (RetrieveActivitiesRequest) returns (RetrieveActivitiesResponse);

    // Subscribe to activity updates (user session tracking)
    rpc SubscribeActivities (SubscribeActivitiesRequest) returns (stream SubscribeActivitiesResponse);

    // Update an activities subscription
    rpc UpdateActivitiesSubscription (UpdateActivitiesSubscriptionRequest) returns (google.protobuf.Empty);

    // Retrieve achievements
    rpc RetrieveAchievements (RetrieveAchievementsRequest) returns (RetrieveAchievementsResponse);

    // Retrieve player achievements (stats + progress)
    rpc RetrievePlayerAchievements (RetrievePlayerAchievementsRequest) returns (RetrievePlayerAchievementsResponse);

    // Global FTS5 search across indexed tables
    rpc Search (SearchRequest) returns (SearchResponse);

    // Subscribe to achievement progression updates
    rpc SubscribeAchievementProgressions (SubscribeAchievementProgressionsRequest) returns (stream SubscribeAchievementProgressionsResponse);

    // Update an achievement progressions subscription
    rpc UpdateAchievementProgressionsSubscription (UpdateAchievementProgressionsSubscriptionRequest) returns (google.protobuf.Empty);

    // Publish a torii offchain message
    rpc PublishMessage (PublishMessageRequest) returns (PublishMessageResponse);

    // Publish a set of torii offchain messages
    rpc PublishMessageBatch (PublishMessageBatchRequest) returns (PublishMessageBatchResponse);

    // Execute a SQL query and return results
    rpc ExecuteSql (types.SqlQueryRequest) returns (types.SqlQueryResponse);
}

message SubscribeTransactionsRequest {
    types.TransactionFilter filter = 1;
}

message SubscribeTransactionsResponse {
    types.Transaction transaction = 1;
}

message RetrieveControllersRequest {
    types.ControllerQuery query = 1;
}

message RetrieveControllersResponse {
    string next_cursor = 1;
    repeated types.Controller controllers = 2;
}

message RetrieveContractsRequest {
    types.ContractQuery query = 1;
}

message RetrieveContractsResponse {
    repeated types.Contract contracts = 1;
}

// A request to update a token balance subscription
message UpdateTokenBalancesSubscriptionRequest {
    // The subscription ID
    uint64 subscription_id = 1;
    // The list of contract addresses to subscribe to
    repeated bytes contract_addresses = 2;
    // The list of account addresses to subscribe to
    repeated bytes account_addresses = 3;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 4;
}

// A response containing token balances
message SubscribeTokenBalancesResponse {
    // The subscription ID
    uint64 subscription_id = 1;
    // The token balance
    types.TokenBalance balance = 2;
}

// A request to retrieve tokens
message RetrieveTokensRequest {
    types.TokenQuery query = 1;
}

// A request to subscribe to token updates
message SubscribeTokensRequest {
    // The list of contract addresses to subscribe to
    repeated bytes contract_addresses = 1;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 2;
}

// A response containing tokens
message RetrieveTokensResponse {
    string next_cursor = 1;
    repeated types.Token tokens = 2;
}

// A response containing token updates
message SubscribeTokensResponse {
    // The subscription ID
    uint64 subscription_id = 1;
    // The token
    types.Token token = 2;
}

// A request to update a token subscription
message UpdateTokenSubscriptionRequest {
    // The subscription ID
    uint64 subscription_id = 1;
    // The list of contract addresses to subscribe to
    repeated bytes contract_addresses = 2;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 3;
}

// A request to retrieve token balances
message RetrieveTokenBalancesRequest {
    types.TokenBalanceQuery query = 1;
}

// A request to subscribe to token balance updates
message SubscribeTokenBalancesRequest {
    // The account addresses to subscribe to
    repeated bytes account_addresses = 1;
    // The list of token contract addresses to subscribe to
    repeated bytes contract_addresses = 2;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 3;
}

// A response containing token balances
message RetrieveTokenBalancesResponse {
    string next_cursor = 1;
    repeated types.TokenBalance balances = 2;
}

// A request to retrieve transactions
message RetrieveTransactionsRequest {
    types.TransactionQuery query = 1;
}

// A response containing transactions
message RetrieveTransactionsResponse {
    string next_cursor = 1;
    repeated types.Transaction transactions = 2;
}

// A request to retrieve token contracts
message RetrieveTokenContractsRequest {
    types.TokenContractQuery query = 1;
}

// A response containing token contracts
message RetrieveTokenContractsResponse {
    string next_cursor = 1;
    repeated types.TokenContract token_contracts = 2;
}

// A request to subscribe to contract updates.
message SubscribeContractsRequest {
    types.ContractQuery query = 1;
}

// A response containing contract updates.
message SubscribeContractsResponse {
    types.Contract contract = 1;
}

// A request to retrieve metadata for a specific world ID.
message WorldsRequest {
    repeated bytes world_addresses = 1;
}

// The metadata response contains addresses and class hashes for the world.
message WorldsResponse {
   repeated types.World worlds = 1;
}

message SubscribeEntitiesRequest {
    types.Clause clause = 1;
    repeated bytes world_addresses = 2;
}

message UpdateEntitiesSubscriptionRequest {
    uint64 subscription_id = 1;
    types.Clause clause = 2;
    repeated bytes world_addresses = 3;
}

message SubscribeEntityResponse {
    types.Entity entity = 1;
    uint64 subscription_id = 2;
}

message RetrieveEntitiesRequest {
    // The entities to retrieve
    types.Query query = 1;
}

message RetrieveEntitiesResponse {
    string next_cursor = 1;
    repeated types.Entity entities = 2;
}

message RetrieveEventsRequest {
    // The events to retrieve
    types.EventQuery query = 1;
}

message RetrieveEventsResponse {
    string next_cursor = 1;
    repeated types.Event events = 2;
}

message SubscribeEventsRequest {
    repeated types.KeysClause keys = 1;
}

message SubscribeEventsResponse {
    types.Event event = 1;
}

message PublishMessageRequest {
    repeated bytes signature = 1;
    string message = 2;
    bytes world_address = 3;
}

message PublishMessageResponse {
    string id = 1;
}

message PublishMessageBatchRequest {
    repeated PublishMessageRequest messages = 1;
}

message PublishMessageBatchResponse {
    repeated PublishMessageResponse responses = 1;
}

// A request to subscribe to token transfer updates
message SubscribeTokenTransfersRequest {
    // The list of contract addresses to subscribe to
    repeated bytes contract_addresses = 1;
    // The list of account addresses to subscribe to (as sender or recipient)
    repeated bytes account_addresses = 2;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 3;
}

// A response containing token transfer updates
message SubscribeTokenTransfersResponse {
    // The subscription ID
    uint64 subscription_id = 1;
    // The token transfer
    types.TokenTransfer transfer = 2;
}

// A request to update a token transfer subscription
message UpdateTokenTransfersSubscriptionRequest {
    // The subscription ID
    uint64 subscription_id = 1;
    // The list of contract addresses to subscribe to
    repeated bytes contract_addresses = 2;
    // The list of account addresses to subscribe to (as sender or recipient)
    repeated bytes account_addresses = 3;
    // The list of token IDs to subscribe to
    repeated bytes token_ids = 4;
}

// A request to retrieve token transfers
message RetrieveTokenTransfersRequest {
    types.TokenTransferQuery query = 1;
}

// A response containing token transfers
message RetrieveTokenTransfersResponse {
    string next_cursor = 1;
    repeated types.TokenTransfer transfers = 2;
}

// A request to retrieve aggregations (leaderboards, stats, rankings)
message RetrieveAggregationsRequest {
    types.AggregationQuery query = 1;
}

// A response containing aggregation entries
message RetrieveAggregationsResponse {
    string next_cursor = 1;
    repeated types.AggregationEntry entries = 2;
}

// A request to subscribe to aggregations updates
message SubscribeAggregationsRequest {
    // Filter by aggregator IDs (e.g., "top_scores", "most_wins")
    repeated string aggregator_ids = 1;
    // Filter by entity IDs (e.g., specific player addresses)
    repeated string entity_ids = 2;
}

// A response containing aggregation update
message SubscribeAggregationsResponse {
    uint64 subscription_id = 1;
    types.AggregationEntry entry = 2;
}

// A request to update an aggregations subscription
message UpdateAggregationsSubscriptionRequest {
    uint64 subscription_id = 1;
    // Filter by aggregator IDs
    repeated string aggregator_ids = 2;
    // Filter by entity IDs
    repeated string entity_ids = 3;
}

// A response for updating an aggregations subscription
message UpdateAggregationsSubscriptionResponse {
}

// A request to retrieve activities
message RetrieveActivitiesRequest {
    types.ActivityQuery query = 1;
}

// A response containing activities
message RetrieveActivitiesResponse {
    string next_cursor = 1;
    repeated types.Activity activities = 2;
}

// A request to subscribe to activity updates
message SubscribeActivitiesRequest {
    // Filter by world addresses
    repeated bytes world_addresses = 1;
    // Filter by namespaces
    repeated string namespaces = 2;
    // Filter by caller addresses
    repeated bytes caller_addresses = 3;
}

// A response containing activity updates
message SubscribeActivitiesResponse {
    // The subscription ID
    uint64 subscription_id = 1;
    // The activity update
    types.Activity activity = 2;
}

// A request to update an activities subscription
message UpdateActivitiesSubscriptionRequest {
    // The subscription ID
    uint64 subscription_id = 1;
    // Filter by world addresses
    repeated bytes world_addresses = 2;
    // Filter by namespaces
    repeated string namespaces = 3;
    // Filter by caller addresses
    repeated bytes caller_addresses = 4;
}

// A request to subscribe to achievement progression updates
message SubscribeAchievementProgressionsRequest {
    // Filter by world addresses
    repeated bytes world_addresses = 1;
    // Filter by namespaces
    repeated string namespaces = 2;
    // Filter by player addresses
    repeated bytes player_addresses = 3;
    // Filter by achievement IDs
    repeated string achievement_ids = 4;
}

// A response containing achievement progression updates
message SubscribeAchievementProgressionsResponse {
    // The subscription ID
    uint64 subscription_id = 1;
    // The achievement progression update
    types.AchievementProgression progression = 2;
}

// A request to update an achievement progressions subscription
message UpdateAchievementProgressionsSubscriptionRequest {
    // The subscription ID
    uint64 subscription_id = 1;
    // Filter by world addresses
    repeated bytes world_addresses = 2;
    // Filter by namespaces
    repeated string namespaces = 3;
    // Filter by player addresses
    repeated bytes player_addresses = 4;
    // Filter by achievement IDs
    repeated string achievement_ids = 5;
}

// A request to retrieve achievements
message RetrieveAchievementsRequest {
    types.AchievementQuery query = 1;
}

// A response containing achievements
message RetrieveAchievementsResponse {
    string next_cursor = 1;
    repeated types.Achievement achievements = 2;
}

// A request to retrieve player achievements
message RetrievePlayerAchievementsRequest {
    types.PlayerAchievementQuery query = 1;
}

// A response containing player achievement data (paginated)
message RetrievePlayerAchievementsResponse {
    string next_cursor = 1;
    repeated types.PlayerAchievementEntry players = 2;
}

// A request to search across FTS5-indexed tables
message SearchRequest {
    types.SearchQuery query = 1;
}

// A response containing search results grouped by table
message SearchResponse {
    types.SearchResponse response = 1;
}