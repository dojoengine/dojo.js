syntax = "proto3";
package types;

import "schema.proto";

message World {
    // The hex-encoded address of the world.
    string world_address = 1;
    // A list of metadata for all registered components in the world.
    repeated Model models = 2;
}

message Model {
    // Model selector
    bytes selector = 1;
    // Model namespace
    string namespace = 2;
    // Model name
    string name = 3;
    // Model size when it is packed for storage
    uint32 packed_size = 4;
    // Model size when it is unpacked
    uint32 unpacked_size = 5;
    // felt bytes of the class hash of the component
    bytes class_hash = 6;
    // The layout of the component in bytes
    bytes layout = 7;
    // The schema of the component serialized in bytes (for simplicity sake)
    bytes schema = 8;
    // felt bytes of the contract address of the component
    bytes contract_address = 9;

    bool use_legacy_store = 10;
}

message Entity {
    // The entity's hashed keys
    bytes hashed_keys = 1;
    // Models of the entity
    repeated Struct models = 2;
    // Created at timestamp
    uint64 created_at = 3;
    // Updated at timestamp
    uint64 updated_at = 4;
    // Block timestamp when the entity was updated
    uint64 executed_at = 5;
}

message Event {
    // The event's keys
    repeated bytes keys = 1;
    // Data of the event
    repeated bytes data = 2;
    // event's transaction hash
    bytes transaction_hash = 3;
}

message Query {
    Clause clause = 1;
    bool no_hashed_keys = 2;
    repeated string models = 3;
    Pagination pagination = 4;
    bool historical = 5;
}

message EventQuery {
    KeysClause keys = 1;
    Pagination pagination = 2;
}

message Clause {
    oneof clause_type {
        HashedKeysClause hashed_keys = 1;
        KeysClause keys = 2;
        MemberClause member = 3;
        CompositeClause composite = 4;
    }
}

message KeysClause {
    repeated bytes keys = 2;
    PatternMatching pattern_matching = 3;
    repeated string models = 4;
}

message HashedKeysClause {
    repeated bytes hashed_keys = 1;
}

message MemberValue {
    oneof value_type {
        Primitive primitive = 1;
        string string = 2;
        MemberValueList list = 3;
    }
}

message MemberValueList {
    repeated MemberValue values = 1;
}

message MemberClause {
    string model = 2;
    string member = 3;
    ComparisonOperator operator = 4;
    MemberValue value = 5;
}

message CompositeClause {
    LogicalOperator operator = 3;
    repeated Clause clauses = 4;
}

enum PatternMatching {
    FixedLen = 0;
    VariableLen = 1;
}

enum LogicalOperator {
    AND = 0;
    OR = 1;
}

enum ComparisonOperator {
    EQ = 0;
    NEQ = 1;
    GT = 2;
    GTE = 3;
    LT = 4;
    LTE = 5;
    IN = 6;
    NOT_IN = 7;
    // Array-specific operators
    CONTAINS = 8;           // Array contains value
    CONTAINS_ALL = 9;       // Array contains all values
    CONTAINS_ANY = 10;      // Array contains any of the values
    ARRAY_LENGTH_EQ = 11;   // Array length equals
    ARRAY_LENGTH_GT = 12;   // Array length greater than
    ARRAY_LENGTH_LT = 13;   // Array length less than
}

message Token {
    optional bytes token_id = 1;
    bytes contract_address = 2;
    string name = 3;
    string symbol = 4;
    uint32 decimals = 5;
    bytes metadata = 6;
    optional bytes total_supply = 7;
}

message TokenCollection {
    bytes contract_address = 2;
    string name = 3;
    string symbol = 4;
    uint32 decimals = 5;
    uint32 count = 6;
    bytes metadata = 7;
}

message TokenBalance {
    bytes balance = 1;
    bytes account_address = 2;
    bytes contract_address = 3;
    optional bytes token_id = 4;
}

message OrderBy {
    string field = 1;
    OrderDirection direction = 2;
}

enum OrderDirection {
    ASC = 0;
    DESC = 1;
}

message Controller {
    bytes address = 1;
    string username = 2;
    uint64 deployed_at_timestamp = 3;
}

enum PaginationDirection {
    FORWARD = 0;
    BACKWARD = 1;
}

message Pagination {
    string cursor = 1;
    uint32 limit = 2;
    PaginationDirection direction = 3;
    repeated OrderBy order_by = 4;
}

message ControllerQuery {
    // The list of contract addresses to retrieve controllers for
    repeated bytes contract_addresses = 1;
    // The list of usernames to retrieve controllers for
    repeated string usernames = 2;
    // Pagination
    Pagination pagination = 3;
}

// A request to retrieve tokens
message TokenQuery {
    // The list of contract addresses to retrieve tokens for
    repeated bytes contract_addresses = 1;
    // The list of token IDs to retrieve tokens for
    repeated bytes token_ids = 2;
    // Pagination
    Pagination pagination = 3;
}

// A request to retrieve token balances
message TokenBalanceQuery {
    // The account addresses to retrieve balances for
    repeated bytes account_addresses = 1;
    // The list of token contract addresses to retrieve balances for
    repeated bytes contract_addresses = 2;
    // The list of token IDs to retrieve balances for
    repeated bytes token_ids = 3;
    // Pagination
    Pagination pagination = 4;
}

enum CallType {
    EXECUTE = 0;
    EXECUTE_FROM_OUTSIDE = 1;
}

message TransactionCall {
    // The contract address being called
    bytes contract_address = 1;
    // The function name being called
    string entrypoint = 2;
    // The calldata for the function call
    repeated bytes calldata = 3;
    // The type of call (EXECUTE, EXECUTE_FROM_OUTSIDE)
    CallType call_type = 4;
    // The address making the call
    bytes caller_address = 5;
}

message Transaction {
    // The transaction hash
    bytes transaction_hash = 1;
    // The sender address
    bytes sender_address = 2;
    // The transaction calldata
    repeated bytes calldata = 3;
    // The maximum fee for the transaction
    bytes max_fee = 4;
    // The transaction signature
    repeated bytes signature = 5;
    // The transaction nonce
    bytes nonce = 6;
    // The block number the transaction was included in
    uint64 block_number = 7;
    // The transaction type (INVOKE, L1_HANDLER, etc.)
    string transaction_type = 8;
    // The timestamp when the transaction was executed
    uint64 block_timestamp = 9;
    // The parsed calls within the transaction
    repeated TransactionCall calls = 10;
    // The unique models associated with this transaction
    repeated bytes unique_models = 11;
}

message TransactionFilter {
    // The list of transaction hashes to retrieve
    repeated bytes transaction_hashes = 1;
    // The list of caller addresses to filter by
    repeated bytes caller_addresses = 2;
    // The list of contract addresses to filter by (calls made to these contracts)
    repeated bytes contract_addresses = 3;
    // The list of entrypoints to filter by
    repeated string entrypoints = 4;
    // The list of model selectors to filter by
    repeated bytes model_selectors = 5;
    // The block number range to filter by
    optional uint64 from_block = 6;
    optional uint64 to_block = 7;
}

message TransactionQuery {
    // The filter to apply to the query
    TransactionFilter filter = 1;
    // Pagination
    Pagination pagination = 2;
}

enum ContractType {
    WORLD = 0;
    ERC20 = 1;
    ERC721 = 2;
    ERC1155 = 3;
    UDC = 4;
    OTHER = 5;
}

message Contract {
    // The contract address
    bytes contract_address = 1;
    // The type of contract
    ContractType contract_type = 2;
    // Current block height
    optional uint64 head = 3;
    // Transactions per second
    optional uint64 tps = 4;
    // Last block timestamp
    optional uint64 last_block_timestamp = 5;
    // Last pending block transaction
    optional bytes last_pending_block_tx = 6;
    // When the contract was last updated
    uint64 updated_at = 7;
    // When the contract was first tracked
    uint64 created_at = 8;
}

// A request to retrieve contracts
message ContractQuery {
    // The list of contract addresses to retrieve
    repeated bytes contract_addresses = 1;
    // The list of contract types to filter by
    repeated ContractType contract_types = 2;
}
