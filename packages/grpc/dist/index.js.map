{"version":3,"sources":["../src/client.ts","../src/generated/google/protobuf/empty.ts","../src/generated/world.ts","../src/generated/types.ts","../src/generated/schema.ts","../src/generated/world.client.ts"],"sourcesContent":["import { GrpcWebFetchTransport } from \"@protobuf-ts/grpcweb-transport\";\nimport { WorldClient } from \"./generated/world.client\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n\nexport interface DojoGrpcClientConfig {\n  url: string;\n  options?: RpcOptions;\n}\n\nexport class DojoGrpcClient {\n  private transport: GrpcWebFetchTransport;\n  public worldClient: WorldClient;\n\n  constructor(config: DojoGrpcClientConfig) {\n    this.transport = new GrpcWebFetchTransport({\n      baseUrl: config.url,\n      format: \"text\",\n    });\n\n    this.worldClient = new WorldClient(this.transport);\n  }\n\n  destroy() {\n    // Clean up any resources if needed\n  }\n}\n\nexport function createDojoGrpcClient(config: DojoGrpcClientConfig): DojoGrpcClient {\n  return new DojoGrpcClient(config);\n}","// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic\n// @generated from protobuf file \"google/protobuf/empty.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * A generic empty message that you can re-use to avoid defining duplicated\n * empty messages in your APIs. A typical example is to use it as the request\n * or the response type of an API method. For instance:\n *\n *     service Foo {\n *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n *     }\n *\n *\n * @generated from protobuf message google.protobuf.Empty\n */\nexport interface Empty {\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Empty$Type extends MessageType<Empty> {\n    constructor() {\n        super(\"google.protobuf.Empty\", []);\n    }\n    create(value?: PartialMessage<Empty>): Empty {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<Empty>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Empty\n */\nexport const Empty = new Empty$Type();\n","// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic\n// @generated from protobuf file \"world.proto\" (package \"world\", syntax proto3)\n// tslint:disable\nimport { Empty } from \"./google/protobuf/empty\";\nimport { ServiceType } from \"@protobuf-ts/runtime-rpc\";\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { KeysClause } from \"./types\";\nimport { Event } from \"./types\";\nimport { EventQuery } from \"./types\";\nimport { Query } from \"./types\";\nimport { Entity } from \"./types\";\nimport { Clause } from \"./types\";\nimport { World as World$ } from \"./types\";\nimport { TokenCollection } from \"./types\";\nimport { TransactionQuery } from \"./types\";\nimport { TokenBalanceQuery } from \"./types\";\nimport { Token } from \"./types\";\nimport { TokenQuery } from \"./types\";\nimport { TokenBalance } from \"./types\";\nimport { Controller } from \"./types\";\nimport { ControllerQuery } from \"./types\";\nimport { Transaction } from \"./types\";\nimport { TransactionFilter } from \"./types\";\n/**\n * @generated from protobuf message world.SubscribeTransactionsRequest\n */\nexport interface SubscribeTransactionsRequest {\n    /**\n     * @generated from protobuf field: types.TransactionFilter filter = 1\n     */\n    filter?: TransactionFilter;\n}\n/**\n * @generated from protobuf message world.SubscribeTransactionsResponse\n */\nexport interface SubscribeTransactionsResponse {\n    /**\n     * @generated from protobuf field: types.Transaction transaction = 1\n     */\n    transaction?: Transaction;\n}\n/**\n * @generated from protobuf message world.RetrieveControllersRequest\n */\nexport interface RetrieveControllersRequest {\n    /**\n     * @generated from protobuf field: types.ControllerQuery query = 1\n     */\n    query?: ControllerQuery;\n}\n/**\n * @generated from protobuf message world.RetrieveControllersResponse\n */\nexport interface RetrieveControllersResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.Controller controllers = 2\n     */\n    controllers: Controller[];\n}\n/**\n * A request to update a token balance subscription\n *\n * @generated from protobuf message world.UpdateTokenBalancesSubscriptionRequest\n */\nexport interface UpdateTokenBalancesSubscriptionRequest {\n    /**\n     * The subscription ID\n     *\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * The list of contract addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 2\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of account addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes account_addresses = 3\n     */\n    accountAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 4\n     */\n    tokenIds: Uint8Array[];\n}\n/**\n * A response containing token balances\n *\n * @generated from protobuf message world.SubscribeTokenBalancesResponse\n */\nexport interface SubscribeTokenBalancesResponse {\n    /**\n     * The subscription ID\n     *\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * The token balance\n     *\n     * @generated from protobuf field: types.TokenBalance balance = 2\n     */\n    balance?: TokenBalance;\n}\n/**\n * A request to retrieve tokens\n *\n * @generated from protobuf message world.RetrieveTokensRequest\n */\nexport interface RetrieveTokensRequest {\n    /**\n     * @generated from protobuf field: types.TokenQuery query = 1\n     */\n    query?: TokenQuery;\n}\n/**\n * A request to subscribe to token updates\n *\n * @generated from protobuf message world.SubscribeTokensRequest\n */\nexport interface SubscribeTokensRequest {\n    /**\n     * The list of contract addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 1\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 2\n     */\n    tokenIds: Uint8Array[];\n}\n/**\n * A response containing tokens\n *\n * @generated from protobuf message world.RetrieveTokensResponse\n */\nexport interface RetrieveTokensResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.Token tokens = 2\n     */\n    tokens: Token[];\n}\n/**\n * A response containing token updates\n *\n * @generated from protobuf message world.SubscribeTokensResponse\n */\nexport interface SubscribeTokensResponse {\n    /**\n     * The subscription ID\n     *\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * The token\n     *\n     * @generated from protobuf field: types.Token token = 2\n     */\n    token?: Token;\n}\n/**\n * A request to update a token subscription\n *\n * @generated from protobuf message world.UpdateTokenSubscriptionRequest\n */\nexport interface UpdateTokenSubscriptionRequest {\n    /**\n     * The subscription ID\n     *\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * The list of contract addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 2\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 3\n     */\n    tokenIds: Uint8Array[];\n}\n/**\n * A request to retrieve token balances\n *\n * @generated from protobuf message world.RetrieveTokenBalancesRequest\n */\nexport interface RetrieveTokenBalancesRequest {\n    /**\n     * @generated from protobuf field: types.TokenBalanceQuery query = 1\n     */\n    query?: TokenBalanceQuery;\n}\n/**\n * A request to subscribe to token balance updates\n *\n * @generated from protobuf message world.SubscribeTokenBalancesRequest\n */\nexport interface SubscribeTokenBalancesRequest {\n    /**\n     * The account addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes account_addresses = 1\n     */\n    accountAddresses: Uint8Array[];\n    /**\n     * The list of token contract addresses to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 2\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to subscribe to\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 3\n     */\n    tokenIds: Uint8Array[];\n}\n/**\n * A response containing token balances\n *\n * @generated from protobuf message world.RetrieveTokenBalancesResponse\n */\nexport interface RetrieveTokenBalancesResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.TokenBalance balances = 2\n     */\n    balances: TokenBalance[];\n}\n/**\n * A request to retrieve transactions\n *\n * @generated from protobuf message world.RetrieveTransactionsRequest\n */\nexport interface RetrieveTransactionsRequest {\n    /**\n     * @generated from protobuf field: types.TransactionQuery query = 1\n     */\n    query?: TransactionQuery;\n}\n/**\n * A response containing transactions\n *\n * @generated from protobuf message world.RetrieveTransactionsResponse\n */\nexport interface RetrieveTransactionsResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.Transaction transactions = 2\n     */\n    transactions: Transaction[];\n}\n/**\n * A request to retrieve token collections\n *\n * @generated from protobuf message world.RetrieveTokenCollectionsRequest\n */\nexport interface RetrieveTokenCollectionsRequest {\n    /**\n     * @generated from protobuf field: types.TokenBalanceQuery query = 1\n     */\n    query?: TokenBalanceQuery;\n}\n/**\n * A response containing token balances\n *\n * @generated from protobuf message world.RetrieveTokenCollectionsResponse\n */\nexport interface RetrieveTokenCollectionsResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.TokenCollection tokens = 2\n     */\n    tokens: TokenCollection[];\n}\n/**\n * A request to subscribe to indexer updates.\n *\n * @generated from protobuf message world.SubscribeIndexerRequest\n */\nexport interface SubscribeIndexerRequest {\n    /**\n     * @generated from protobuf field: bytes contract_address = 1\n     */\n    contractAddress: Uint8Array;\n}\n/**\n * A response containing indexer updates.\n *\n * @generated from protobuf message world.SubscribeIndexerResponse\n */\nexport interface SubscribeIndexerResponse {\n    /**\n     * @generated from protobuf field: int64 head = 1\n     */\n    head: bigint;\n    /**\n     * @generated from protobuf field: int64 tps = 2\n     */\n    tps: bigint;\n    /**\n     * @generated from protobuf field: int64 last_block_timestamp = 3\n     */\n    lastBlockTimestamp: bigint;\n    /**\n     * @generated from protobuf field: bytes contract_address = 4\n     */\n    contractAddress: Uint8Array;\n}\n/**\n * A request to retrieve metadata for a specific world ID.\n *\n * @generated from protobuf message world.WorldMetadataRequest\n */\nexport interface WorldMetadataRequest {\n}\n/**\n * The metadata response contains addresses and class hashes for the world.\n *\n * @generated from protobuf message world.WorldMetadataResponse\n */\nexport interface WorldMetadataResponse {\n    /**\n     * @generated from protobuf field: types.World world = 1\n     */\n    world?: World$;\n}\n/**\n * @generated from protobuf message world.SubscribeEntitiesRequest\n */\nexport interface SubscribeEntitiesRequest {\n    /**\n     * @generated from protobuf field: types.Clause clause = 1\n     */\n    clause?: Clause;\n}\n/**\n * @generated from protobuf message world.SubscribeEventMessagesRequest\n */\nexport interface SubscribeEventMessagesRequest {\n    /**\n     * @generated from protobuf field: types.Clause clause = 1\n     */\n    clause?: Clause;\n}\n/**\n * @generated from protobuf message world.UpdateEntitiesSubscriptionRequest\n */\nexport interface UpdateEntitiesSubscriptionRequest {\n    /**\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * @generated from protobuf field: types.Clause clause = 2\n     */\n    clause?: Clause;\n}\n/**\n * @generated from protobuf message world.UpdateEventMessagesSubscriptionRequest\n */\nexport interface UpdateEventMessagesSubscriptionRequest {\n    /**\n     * @generated from protobuf field: uint64 subscription_id = 1\n     */\n    subscriptionId: bigint;\n    /**\n     * @generated from protobuf field: types.Clause clause = 2\n     */\n    clause?: Clause;\n}\n/**\n * @generated from protobuf message world.SubscribeEntityResponse\n */\nexport interface SubscribeEntityResponse {\n    /**\n     * @generated from protobuf field: types.Entity entity = 1\n     */\n    entity?: Entity;\n    /**\n     * @generated from protobuf field: uint64 subscription_id = 2\n     */\n    subscriptionId: bigint;\n}\n/**\n * @generated from protobuf message world.RetrieveEntitiesRequest\n */\nexport interface RetrieveEntitiesRequest {\n    /**\n     * The entities to retrieve\n     *\n     * @generated from protobuf field: types.Query query = 1\n     */\n    query?: Query;\n}\n/**\n * @generated from protobuf message world.RetrieveEventMessagesRequest\n */\nexport interface RetrieveEventMessagesRequest {\n    /**\n     * The event messages to retrieve\n     *\n     * @generated from protobuf field: types.Query query = 1\n     */\n    query?: Query;\n}\n/**\n * @generated from protobuf message world.RetrieveEntitiesResponse\n */\nexport interface RetrieveEntitiesResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.Entity entities = 2\n     */\n    entities: Entity[];\n}\n/**\n * @generated from protobuf message world.RetrieveEventsRequest\n */\nexport interface RetrieveEventsRequest {\n    /**\n     * The events to retrieve\n     *\n     * @generated from protobuf field: types.EventQuery query = 1\n     */\n    query?: EventQuery;\n}\n/**\n * @generated from protobuf message world.RetrieveEventsResponse\n */\nexport interface RetrieveEventsResponse {\n    /**\n     * @generated from protobuf field: string next_cursor = 1\n     */\n    nextCursor: string;\n    /**\n     * @generated from protobuf field: repeated types.Event events = 2\n     */\n    events: Event[];\n}\n/**\n * @generated from protobuf message world.SubscribeEventsRequest\n */\nexport interface SubscribeEventsRequest {\n    /**\n     * @generated from protobuf field: repeated types.KeysClause keys = 1\n     */\n    keys: KeysClause[];\n}\n/**\n * @generated from protobuf message world.SubscribeEventsResponse\n */\nexport interface SubscribeEventsResponse {\n    /**\n     * @generated from protobuf field: types.Event event = 1\n     */\n    event?: Event;\n}\n/**\n * @generated from protobuf message world.PublishMessageRequest\n */\nexport interface PublishMessageRequest {\n    /**\n     * @generated from protobuf field: repeated bytes signature = 1\n     */\n    signature: Uint8Array[];\n    /**\n     * @generated from protobuf field: string message = 2\n     */\n    message: string;\n}\n/**\n * @generated from protobuf message world.PublishMessageResponse\n */\nexport interface PublishMessageResponse {\n    /**\n     * @generated from protobuf field: bytes entity_id = 1\n     */\n    entityId: Uint8Array;\n}\n/**\n * @generated from protobuf message world.PublishMessageBatchRequest\n */\nexport interface PublishMessageBatchRequest {\n    /**\n     * @generated from protobuf field: repeated world.PublishMessageRequest messages = 1\n     */\n    messages: PublishMessageRequest[];\n}\n/**\n * @generated from protobuf message world.PublishMessageBatchResponse\n */\nexport interface PublishMessageBatchResponse {\n    /**\n     * @generated from protobuf field: repeated world.PublishMessageResponse responses = 1\n     */\n    responses: PublishMessageResponse[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTransactionsRequest$Type extends MessageType<SubscribeTransactionsRequest> {\n    constructor() {\n        super(\"world.SubscribeTransactionsRequest\", [\n            { no: 1, name: \"filter\", kind: \"message\", T: () => TransactionFilter }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTransactionsRequest>): SubscribeTransactionsRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTransactionsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTransactionsRequest): SubscribeTransactionsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TransactionFilter filter */ 1:\n                    message.filter = TransactionFilter.internalBinaryRead(reader, reader.uint32(), options, message.filter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTransactionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TransactionFilter filter = 1; */\n        if (message.filter)\n            TransactionFilter.internalBinaryWrite(message.filter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTransactionsRequest\n */\nexport const SubscribeTransactionsRequest = new SubscribeTransactionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTransactionsResponse$Type extends MessageType<SubscribeTransactionsResponse> {\n    constructor() {\n        super(\"world.SubscribeTransactionsResponse\", [\n            { no: 1, name: \"transaction\", kind: \"message\", T: () => Transaction }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTransactionsResponse>): SubscribeTransactionsResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTransactionsResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTransactionsResponse): SubscribeTransactionsResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Transaction transaction */ 1:\n                    message.transaction = Transaction.internalBinaryRead(reader, reader.uint32(), options, message.transaction);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTransactionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Transaction transaction = 1; */\n        if (message.transaction)\n            Transaction.internalBinaryWrite(message.transaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTransactionsResponse\n */\nexport const SubscribeTransactionsResponse = new SubscribeTransactionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveControllersRequest$Type extends MessageType<RetrieveControllersRequest> {\n    constructor() {\n        super(\"world.RetrieveControllersRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => ControllerQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveControllersRequest>): RetrieveControllersRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveControllersRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveControllersRequest): RetrieveControllersRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.ControllerQuery query */ 1:\n                    message.query = ControllerQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveControllersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.ControllerQuery query = 1; */\n        if (message.query)\n            ControllerQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveControllersRequest\n */\nexport const RetrieveControllersRequest = new RetrieveControllersRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveControllersResponse$Type extends MessageType<RetrieveControllersResponse> {\n    constructor() {\n        super(\"world.RetrieveControllersResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"controllers\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Controller }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveControllersResponse>): RetrieveControllersResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.controllers = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveControllersResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveControllersResponse): RetrieveControllersResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.Controller controllers */ 2:\n                    message.controllers.push(Controller.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveControllersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.Controller controllers = 2; */\n        for (let i = 0; i < message.controllers.length; i++)\n            Controller.internalBinaryWrite(message.controllers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveControllersResponse\n */\nexport const RetrieveControllersResponse = new RetrieveControllersResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateTokenBalancesSubscriptionRequest$Type extends MessageType<UpdateTokenBalancesSubscriptionRequest> {\n    constructor() {\n        super(\"world.UpdateTokenBalancesSubscriptionRequest\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"account_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UpdateTokenBalancesSubscriptionRequest>): UpdateTokenBalancesSubscriptionRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        message.contractAddresses = [];\n        message.accountAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<UpdateTokenBalancesSubscriptionRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTokenBalancesSubscriptionRequest): UpdateTokenBalancesSubscriptionRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* repeated bytes contract_addresses */ 2:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes account_addresses */ 3:\n                    message.accountAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 4:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UpdateTokenBalancesSubscriptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* repeated bytes contract_addresses = 2; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes account_addresses = 3; */\n        for (let i = 0; i < message.accountAddresses.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.accountAddresses[i]);\n        /* repeated bytes token_ids = 4; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(4, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.UpdateTokenBalancesSubscriptionRequest\n */\nexport const UpdateTokenBalancesSubscriptionRequest = new UpdateTokenBalancesSubscriptionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTokenBalancesResponse$Type extends MessageType<SubscribeTokenBalancesResponse> {\n    constructor() {\n        super(\"world.SubscribeTokenBalancesResponse\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"balance\", kind: \"message\", T: () => TokenBalance }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTokenBalancesResponse>): SubscribeTokenBalancesResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTokenBalancesResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTokenBalancesResponse): SubscribeTokenBalancesResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* types.TokenBalance balance */ 2:\n                    message.balance = TokenBalance.internalBinaryRead(reader, reader.uint32(), options, message.balance);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTokenBalancesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* types.TokenBalance balance = 2; */\n        if (message.balance)\n            TokenBalance.internalBinaryWrite(message.balance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTokenBalancesResponse\n */\nexport const SubscribeTokenBalancesResponse = new SubscribeTokenBalancesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokensRequest$Type extends MessageType<RetrieveTokensRequest> {\n    constructor() {\n        super(\"world.RetrieveTokensRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => TokenQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokensRequest>): RetrieveTokensRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokensRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokensRequest): RetrieveTokensRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TokenQuery query */ 1:\n                    message.query = TokenQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TokenQuery query = 1; */\n        if (message.query)\n            TokenQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokensRequest\n */\nexport const RetrieveTokensRequest = new RetrieveTokensRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTokensRequest$Type extends MessageType<SubscribeTokensRequest> {\n    constructor() {\n        super(\"world.SubscribeTokensRequest\", [\n            { no: 1, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTokensRequest>): SubscribeTokensRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTokensRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTokensRequest): SubscribeTokensRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes contract_addresses */ 1:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 2:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes contract_addresses = 1; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes token_ids = 2; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTokensRequest\n */\nexport const SubscribeTokensRequest = new SubscribeTokensRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokensResponse$Type extends MessageType<RetrieveTokensResponse> {\n    constructor() {\n        super(\"world.RetrieveTokensResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"tokens\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Token }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokensResponse>): RetrieveTokensResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.tokens = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokensResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokensResponse): RetrieveTokensResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.Token tokens */ 2:\n                    message.tokens.push(Token.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.Token tokens = 2; */\n        for (let i = 0; i < message.tokens.length; i++)\n            Token.internalBinaryWrite(message.tokens[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokensResponse\n */\nexport const RetrieveTokensResponse = new RetrieveTokensResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTokensResponse$Type extends MessageType<SubscribeTokensResponse> {\n    constructor() {\n        super(\"world.SubscribeTokensResponse\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"token\", kind: \"message\", T: () => Token }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTokensResponse>): SubscribeTokensResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTokensResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTokensResponse): SubscribeTokensResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* types.Token token */ 2:\n                    message.token = Token.internalBinaryRead(reader, reader.uint32(), options, message.token);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* types.Token token = 2; */\n        if (message.token)\n            Token.internalBinaryWrite(message.token, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTokensResponse\n */\nexport const SubscribeTokensResponse = new SubscribeTokensResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateTokenSubscriptionRequest$Type extends MessageType<UpdateTokenSubscriptionRequest> {\n    constructor() {\n        super(\"world.UpdateTokenSubscriptionRequest\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UpdateTokenSubscriptionRequest>): UpdateTokenSubscriptionRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        message.contractAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<UpdateTokenSubscriptionRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTokenSubscriptionRequest): UpdateTokenSubscriptionRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* repeated bytes contract_addresses */ 2:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 3:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UpdateTokenSubscriptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* repeated bytes contract_addresses = 2; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes token_ids = 3; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.UpdateTokenSubscriptionRequest\n */\nexport const UpdateTokenSubscriptionRequest = new UpdateTokenSubscriptionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokenBalancesRequest$Type extends MessageType<RetrieveTokenBalancesRequest> {\n    constructor() {\n        super(\"world.RetrieveTokenBalancesRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => TokenBalanceQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokenBalancesRequest>): RetrieveTokenBalancesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokenBalancesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokenBalancesRequest): RetrieveTokenBalancesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TokenBalanceQuery query */ 1:\n                    message.query = TokenBalanceQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokenBalancesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TokenBalanceQuery query = 1; */\n        if (message.query)\n            TokenBalanceQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokenBalancesRequest\n */\nexport const RetrieveTokenBalancesRequest = new RetrieveTokenBalancesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeTokenBalancesRequest$Type extends MessageType<SubscribeTokenBalancesRequest> {\n    constructor() {\n        super(\"world.SubscribeTokenBalancesRequest\", [\n            { no: 1, name: \"account_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeTokenBalancesRequest>): SubscribeTokenBalancesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.accountAddresses = [];\n        message.contractAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeTokenBalancesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeTokenBalancesRequest): SubscribeTokenBalancesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes account_addresses */ 1:\n                    message.accountAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes contract_addresses */ 2:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 3:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeTokenBalancesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes account_addresses = 1; */\n        for (let i = 0; i < message.accountAddresses.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.accountAddresses[i]);\n        /* repeated bytes contract_addresses = 2; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes token_ids = 3; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeTokenBalancesRequest\n */\nexport const SubscribeTokenBalancesRequest = new SubscribeTokenBalancesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokenBalancesResponse$Type extends MessageType<RetrieveTokenBalancesResponse> {\n    constructor() {\n        super(\"world.RetrieveTokenBalancesResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"balances\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TokenBalance }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokenBalancesResponse>): RetrieveTokenBalancesResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.balances = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokenBalancesResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokenBalancesResponse): RetrieveTokenBalancesResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.TokenBalance balances */ 2:\n                    message.balances.push(TokenBalance.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokenBalancesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.TokenBalance balances = 2; */\n        for (let i = 0; i < message.balances.length; i++)\n            TokenBalance.internalBinaryWrite(message.balances[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokenBalancesResponse\n */\nexport const RetrieveTokenBalancesResponse = new RetrieveTokenBalancesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTransactionsRequest$Type extends MessageType<RetrieveTransactionsRequest> {\n    constructor() {\n        super(\"world.RetrieveTransactionsRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => TransactionQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTransactionsRequest>): RetrieveTransactionsRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTransactionsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTransactionsRequest): RetrieveTransactionsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TransactionQuery query */ 1:\n                    message.query = TransactionQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTransactionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TransactionQuery query = 1; */\n        if (message.query)\n            TransactionQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTransactionsRequest\n */\nexport const RetrieveTransactionsRequest = new RetrieveTransactionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTransactionsResponse$Type extends MessageType<RetrieveTransactionsResponse> {\n    constructor() {\n        super(\"world.RetrieveTransactionsResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"transactions\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Transaction }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTransactionsResponse>): RetrieveTransactionsResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.transactions = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTransactionsResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTransactionsResponse): RetrieveTransactionsResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.Transaction transactions */ 2:\n                    message.transactions.push(Transaction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTransactionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.Transaction transactions = 2; */\n        for (let i = 0; i < message.transactions.length; i++)\n            Transaction.internalBinaryWrite(message.transactions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTransactionsResponse\n */\nexport const RetrieveTransactionsResponse = new RetrieveTransactionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokenCollectionsRequest$Type extends MessageType<RetrieveTokenCollectionsRequest> {\n    constructor() {\n        super(\"world.RetrieveTokenCollectionsRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => TokenBalanceQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokenCollectionsRequest>): RetrieveTokenCollectionsRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokenCollectionsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokenCollectionsRequest): RetrieveTokenCollectionsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TokenBalanceQuery query */ 1:\n                    message.query = TokenBalanceQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokenCollectionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TokenBalanceQuery query = 1; */\n        if (message.query)\n            TokenBalanceQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokenCollectionsRequest\n */\nexport const RetrieveTokenCollectionsRequest = new RetrieveTokenCollectionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveTokenCollectionsResponse$Type extends MessageType<RetrieveTokenCollectionsResponse> {\n    constructor() {\n        super(\"world.RetrieveTokenCollectionsResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"tokens\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TokenCollection }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveTokenCollectionsResponse>): RetrieveTokenCollectionsResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.tokens = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveTokenCollectionsResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveTokenCollectionsResponse): RetrieveTokenCollectionsResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.TokenCollection tokens */ 2:\n                    message.tokens.push(TokenCollection.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveTokenCollectionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.TokenCollection tokens = 2; */\n        for (let i = 0; i < message.tokens.length; i++)\n            TokenCollection.internalBinaryWrite(message.tokens[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveTokenCollectionsResponse\n */\nexport const RetrieveTokenCollectionsResponse = new RetrieveTokenCollectionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeIndexerRequest$Type extends MessageType<SubscribeIndexerRequest> {\n    constructor() {\n        super(\"world.SubscribeIndexerRequest\", [\n            { no: 1, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeIndexerRequest>): SubscribeIndexerRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddress = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeIndexerRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeIndexerRequest): SubscribeIndexerRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes contract_address */ 1:\n                    message.contractAddress = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeIndexerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes contract_address = 1; */\n        if (message.contractAddress.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.contractAddress);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeIndexerRequest\n */\nexport const SubscribeIndexerRequest = new SubscribeIndexerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeIndexerResponse$Type extends MessageType<SubscribeIndexerResponse> {\n    constructor() {\n        super(\"world.SubscribeIndexerResponse\", [\n            { no: 1, name: \"head\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"tps\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"last_block_timestamp\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeIndexerResponse>): SubscribeIndexerResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.head = 0n;\n        message.tps = 0n;\n        message.lastBlockTimestamp = 0n;\n        message.contractAddress = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeIndexerResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeIndexerResponse): SubscribeIndexerResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int64 head */ 1:\n                    message.head = reader.int64().toBigInt();\n                    break;\n                case /* int64 tps */ 2:\n                    message.tps = reader.int64().toBigInt();\n                    break;\n                case /* int64 last_block_timestamp */ 3:\n                    message.lastBlockTimestamp = reader.int64().toBigInt();\n                    break;\n                case /* bytes contract_address */ 4:\n                    message.contractAddress = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeIndexerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int64 head = 1; */\n        if (message.head !== 0n)\n            writer.tag(1, WireType.Varint).int64(message.head);\n        /* int64 tps = 2; */\n        if (message.tps !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.tps);\n        /* int64 last_block_timestamp = 3; */\n        if (message.lastBlockTimestamp !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.lastBlockTimestamp);\n        /* bytes contract_address = 4; */\n        if (message.contractAddress.length)\n            writer.tag(4, WireType.LengthDelimited).bytes(message.contractAddress);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeIndexerResponse\n */\nexport const SubscribeIndexerResponse = new SubscribeIndexerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WorldMetadataRequest$Type extends MessageType<WorldMetadataRequest> {\n    constructor() {\n        super(\"world.WorldMetadataRequest\", []);\n    }\n    create(value?: PartialMessage<WorldMetadataRequest>): WorldMetadataRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<WorldMetadataRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldMetadataRequest): WorldMetadataRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WorldMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.WorldMetadataRequest\n */\nexport const WorldMetadataRequest = new WorldMetadataRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WorldMetadataResponse$Type extends MessageType<WorldMetadataResponse> {\n    constructor() {\n        super(\"world.WorldMetadataResponse\", [\n            { no: 1, name: \"world\", kind: \"message\", T: () => World$ }\n        ]);\n    }\n    create(value?: PartialMessage<WorldMetadataResponse>): WorldMetadataResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<WorldMetadataResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldMetadataResponse): WorldMetadataResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.World world */ 1:\n                    message.world = World$.internalBinaryRead(reader, reader.uint32(), options, message.world);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WorldMetadataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.World world = 1; */\n        if (message.world)\n            World$.internalBinaryWrite(message.world, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.WorldMetadataResponse\n */\nexport const WorldMetadataResponse = new WorldMetadataResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeEntitiesRequest$Type extends MessageType<SubscribeEntitiesRequest> {\n    constructor() {\n        super(\"world.SubscribeEntitiesRequest\", [\n            { no: 1, name: \"clause\", kind: \"message\", T: () => Clause }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeEntitiesRequest>): SubscribeEntitiesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeEntitiesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeEntitiesRequest): SubscribeEntitiesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Clause clause */ 1:\n                    message.clause = Clause.internalBinaryRead(reader, reader.uint32(), options, message.clause);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeEntitiesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Clause clause = 1; */\n        if (message.clause)\n            Clause.internalBinaryWrite(message.clause, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeEntitiesRequest\n */\nexport const SubscribeEntitiesRequest = new SubscribeEntitiesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeEventMessagesRequest$Type extends MessageType<SubscribeEventMessagesRequest> {\n    constructor() {\n        super(\"world.SubscribeEventMessagesRequest\", [\n            { no: 1, name: \"clause\", kind: \"message\", T: () => Clause }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeEventMessagesRequest>): SubscribeEventMessagesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeEventMessagesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeEventMessagesRequest): SubscribeEventMessagesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Clause clause */ 1:\n                    message.clause = Clause.internalBinaryRead(reader, reader.uint32(), options, message.clause);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeEventMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Clause clause = 1; */\n        if (message.clause)\n            Clause.internalBinaryWrite(message.clause, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeEventMessagesRequest\n */\nexport const SubscribeEventMessagesRequest = new SubscribeEventMessagesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateEntitiesSubscriptionRequest$Type extends MessageType<UpdateEntitiesSubscriptionRequest> {\n    constructor() {\n        super(\"world.UpdateEntitiesSubscriptionRequest\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"clause\", kind: \"message\", T: () => Clause }\n        ]);\n    }\n    create(value?: PartialMessage<UpdateEntitiesSubscriptionRequest>): UpdateEntitiesSubscriptionRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<UpdateEntitiesSubscriptionRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEntitiesSubscriptionRequest): UpdateEntitiesSubscriptionRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* types.Clause clause */ 2:\n                    message.clause = Clause.internalBinaryRead(reader, reader.uint32(), options, message.clause);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UpdateEntitiesSubscriptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* types.Clause clause = 2; */\n        if (message.clause)\n            Clause.internalBinaryWrite(message.clause, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.UpdateEntitiesSubscriptionRequest\n */\nexport const UpdateEntitiesSubscriptionRequest = new UpdateEntitiesSubscriptionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateEventMessagesSubscriptionRequest$Type extends MessageType<UpdateEventMessagesSubscriptionRequest> {\n    constructor() {\n        super(\"world.UpdateEventMessagesSubscriptionRequest\", [\n            { no: 1, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"clause\", kind: \"message\", T: () => Clause }\n        ]);\n    }\n    create(value?: PartialMessage<UpdateEventMessagesSubscriptionRequest>): UpdateEventMessagesSubscriptionRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<UpdateEventMessagesSubscriptionRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEventMessagesSubscriptionRequest): UpdateEventMessagesSubscriptionRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 subscription_id */ 1:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                case /* types.Clause clause */ 2:\n                    message.clause = Clause.internalBinaryRead(reader, reader.uint32(), options, message.clause);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UpdateEventMessagesSubscriptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 subscription_id = 1; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);\n        /* types.Clause clause = 2; */\n        if (message.clause)\n            Clause.internalBinaryWrite(message.clause, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.UpdateEventMessagesSubscriptionRequest\n */\nexport const UpdateEventMessagesSubscriptionRequest = new UpdateEventMessagesSubscriptionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeEntityResponse$Type extends MessageType<SubscribeEntityResponse> {\n    constructor() {\n        super(\"world.SubscribeEntityResponse\", [\n            { no: 1, name: \"entity\", kind: \"message\", T: () => Entity },\n            { no: 2, name: \"subscription_id\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeEntityResponse>): SubscribeEntityResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.subscriptionId = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeEntityResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeEntityResponse): SubscribeEntityResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Entity entity */ 1:\n                    message.entity = Entity.internalBinaryRead(reader, reader.uint32(), options, message.entity);\n                    break;\n                case /* uint64 subscription_id */ 2:\n                    message.subscriptionId = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeEntityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Entity entity = 1; */\n        if (message.entity)\n            Entity.internalBinaryWrite(message.entity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* uint64 subscription_id = 2; */\n        if (message.subscriptionId !== 0n)\n            writer.tag(2, WireType.Varint).uint64(message.subscriptionId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeEntityResponse\n */\nexport const SubscribeEntityResponse = new SubscribeEntityResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveEntitiesRequest$Type extends MessageType<RetrieveEntitiesRequest> {\n    constructor() {\n        super(\"world.RetrieveEntitiesRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => Query }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveEntitiesRequest>): RetrieveEntitiesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveEntitiesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveEntitiesRequest): RetrieveEntitiesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Query query */ 1:\n                    message.query = Query.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveEntitiesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Query query = 1; */\n        if (message.query)\n            Query.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveEntitiesRequest\n */\nexport const RetrieveEntitiesRequest = new RetrieveEntitiesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveEventMessagesRequest$Type extends MessageType<RetrieveEventMessagesRequest> {\n    constructor() {\n        super(\"world.RetrieveEventMessagesRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => Query }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveEventMessagesRequest>): RetrieveEventMessagesRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveEventMessagesRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveEventMessagesRequest): RetrieveEventMessagesRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Query query */ 1:\n                    message.query = Query.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveEventMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Query query = 1; */\n        if (message.query)\n            Query.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveEventMessagesRequest\n */\nexport const RetrieveEventMessagesRequest = new RetrieveEventMessagesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveEntitiesResponse$Type extends MessageType<RetrieveEntitiesResponse> {\n    constructor() {\n        super(\"world.RetrieveEntitiesResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"entities\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Entity }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveEntitiesResponse>): RetrieveEntitiesResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.entities = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveEntitiesResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveEntitiesResponse): RetrieveEntitiesResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.Entity entities */ 2:\n                    message.entities.push(Entity.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveEntitiesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.Entity entities = 2; */\n        for (let i = 0; i < message.entities.length; i++)\n            Entity.internalBinaryWrite(message.entities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveEntitiesResponse\n */\nexport const RetrieveEntitiesResponse = new RetrieveEntitiesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveEventsRequest$Type extends MessageType<RetrieveEventsRequest> {\n    constructor() {\n        super(\"world.RetrieveEventsRequest\", [\n            { no: 1, name: \"query\", kind: \"message\", T: () => EventQuery }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveEventsRequest>): RetrieveEventsRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveEventsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveEventsRequest): RetrieveEventsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.EventQuery query */ 1:\n                    message.query = EventQuery.internalBinaryRead(reader, reader.uint32(), options, message.query);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.EventQuery query = 1; */\n        if (message.query)\n            EventQuery.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveEventsRequest\n */\nexport const RetrieveEventsRequest = new RetrieveEventsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetrieveEventsResponse$Type extends MessageType<RetrieveEventsResponse> {\n    constructor() {\n        super(\"world.RetrieveEventsResponse\", [\n            { no: 1, name: \"next_cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"events\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Event }\n        ]);\n    }\n    create(value?: PartialMessage<RetrieveEventsResponse>): RetrieveEventsResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.nextCursor = \"\";\n        message.events = [];\n        if (value !== undefined)\n            reflectionMergePartial<RetrieveEventsResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveEventsResponse): RetrieveEventsResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string next_cursor */ 1:\n                    message.nextCursor = reader.string();\n                    break;\n                case /* repeated types.Event events */ 2:\n                    message.events.push(Event.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetrieveEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string next_cursor = 1; */\n        if (message.nextCursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.nextCursor);\n        /* repeated types.Event events = 2; */\n        for (let i = 0; i < message.events.length; i++)\n            Event.internalBinaryWrite(message.events[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.RetrieveEventsResponse\n */\nexport const RetrieveEventsResponse = new RetrieveEventsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeEventsRequest$Type extends MessageType<SubscribeEventsRequest> {\n    constructor() {\n        super(\"world.SubscribeEventsRequest\", [\n            { no: 1, name: \"keys\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => KeysClause }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeEventsRequest>): SubscribeEventsRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.keys = [];\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeEventsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeEventsRequest): SubscribeEventsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated types.KeysClause keys */ 1:\n                    message.keys.push(KeysClause.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated types.KeysClause keys = 1; */\n        for (let i = 0; i < message.keys.length; i++)\n            KeysClause.internalBinaryWrite(message.keys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeEventsRequest\n */\nexport const SubscribeEventsRequest = new SubscribeEventsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeEventsResponse$Type extends MessageType<SubscribeEventsResponse> {\n    constructor() {\n        super(\"world.SubscribeEventsResponse\", [\n            { no: 1, name: \"event\", kind: \"message\", T: () => Event }\n        ]);\n    }\n    create(value?: PartialMessage<SubscribeEventsResponse>): SubscribeEventsResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<SubscribeEventsResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeEventsResponse): SubscribeEventsResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Event event */ 1:\n                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubscribeEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Event event = 1; */\n        if (message.event)\n            Event.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.SubscribeEventsResponse\n */\nexport const SubscribeEventsResponse = new SubscribeEventsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishMessageRequest$Type extends MessageType<PublishMessageRequest> {\n    constructor() {\n        super(\"world.PublishMessageRequest\", [\n            { no: 1, name: \"signature\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"message\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PublishMessageRequest>): PublishMessageRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.signature = [];\n        message.message = \"\";\n        if (value !== undefined)\n            reflectionMergePartial<PublishMessageRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishMessageRequest): PublishMessageRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes signature */ 1:\n                    message.signature.push(reader.bytes());\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PublishMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes signature = 1; */\n        for (let i = 0; i < message.signature.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.signature[i]);\n        /* string message = 2; */\n        if (message.message !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.PublishMessageRequest\n */\nexport const PublishMessageRequest = new PublishMessageRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishMessageResponse$Type extends MessageType<PublishMessageResponse> {\n    constructor() {\n        super(\"world.PublishMessageResponse\", [\n            { no: 1, name: \"entity_id\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PublishMessageResponse>): PublishMessageResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.entityId = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<PublishMessageResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishMessageResponse): PublishMessageResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes entity_id */ 1:\n                    message.entityId = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PublishMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes entity_id = 1; */\n        if (message.entityId.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.entityId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.PublishMessageResponse\n */\nexport const PublishMessageResponse = new PublishMessageResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishMessageBatchRequest$Type extends MessageType<PublishMessageBatchRequest> {\n    constructor() {\n        super(\"world.PublishMessageBatchRequest\", [\n            { no: 1, name: \"messages\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PublishMessageRequest }\n        ]);\n    }\n    create(value?: PartialMessage<PublishMessageBatchRequest>): PublishMessageBatchRequest {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.messages = [];\n        if (value !== undefined)\n            reflectionMergePartial<PublishMessageBatchRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishMessageBatchRequest): PublishMessageBatchRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated world.PublishMessageRequest messages */ 1:\n                    message.messages.push(PublishMessageRequest.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PublishMessageBatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated world.PublishMessageRequest messages = 1; */\n        for (let i = 0; i < message.messages.length; i++)\n            PublishMessageRequest.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.PublishMessageBatchRequest\n */\nexport const PublishMessageBatchRequest = new PublishMessageBatchRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishMessageBatchResponse$Type extends MessageType<PublishMessageBatchResponse> {\n    constructor() {\n        super(\"world.PublishMessageBatchResponse\", [\n            { no: 1, name: \"responses\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PublishMessageResponse }\n        ]);\n    }\n    create(value?: PartialMessage<PublishMessageBatchResponse>): PublishMessageBatchResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.responses = [];\n        if (value !== undefined)\n            reflectionMergePartial<PublishMessageBatchResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishMessageBatchResponse): PublishMessageBatchResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated world.PublishMessageResponse responses */ 1:\n                    message.responses.push(PublishMessageResponse.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PublishMessageBatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated world.PublishMessageResponse responses = 1; */\n        for (let i = 0; i < message.responses.length; i++)\n            PublishMessageResponse.internalBinaryWrite(message.responses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message world.PublishMessageBatchResponse\n */\nexport const PublishMessageBatchResponse = new PublishMessageBatchResponse$Type();\n/**\n * @generated ServiceType for protobuf service world.World\n */\nexport const World = new ServiceType(\"world.World\", [\n    { name: \"SubscribeIndexer\", serverStreaming: true, options: {}, I: SubscribeIndexerRequest, O: SubscribeIndexerResponse },\n    { name: \"WorldMetadata\", options: {}, I: WorldMetadataRequest, O: WorldMetadataResponse },\n    { name: \"SubscribeEntities\", serverStreaming: true, options: {}, I: SubscribeEntitiesRequest, O: SubscribeEntityResponse },\n    { name: \"UpdateEntitiesSubscription\", options: {}, I: UpdateEntitiesSubscriptionRequest, O: Empty },\n    { name: \"RetrieveEntities\", options: {}, I: RetrieveEntitiesRequest, O: RetrieveEntitiesResponse },\n    { name: \"SubscribeEventMessages\", serverStreaming: true, options: {}, I: SubscribeEventMessagesRequest, O: SubscribeEntityResponse },\n    { name: \"UpdateEventMessagesSubscription\", options: {}, I: UpdateEventMessagesSubscriptionRequest, O: Empty },\n    { name: \"SubscribeTokenBalances\", serverStreaming: true, options: {}, I: SubscribeTokenBalancesRequest, O: SubscribeTokenBalancesResponse },\n    { name: \"UpdateTokenBalancesSubscription\", options: {}, I: UpdateTokenBalancesSubscriptionRequest, O: Empty },\n    { name: \"SubscribeTokens\", serverStreaming: true, options: {}, I: SubscribeTokensRequest, O: SubscribeTokensResponse },\n    { name: \"UpdateTokensSubscription\", options: {}, I: UpdateTokenSubscriptionRequest, O: Empty },\n    { name: \"RetrieveEventMessages\", options: {}, I: RetrieveEventMessagesRequest, O: RetrieveEntitiesResponse },\n    { name: \"RetrieveEvents\", options: {}, I: RetrieveEventsRequest, O: RetrieveEventsResponse },\n    { name: \"SubscribeEvents\", serverStreaming: true, options: {}, I: SubscribeEventsRequest, O: SubscribeEventsResponse },\n    { name: \"RetrieveTokens\", options: {}, I: RetrieveTokensRequest, O: RetrieveTokensResponse },\n    { name: \"RetrieveTokenBalances\", options: {}, I: RetrieveTokenBalancesRequest, O: RetrieveTokenBalancesResponse },\n    { name: \"RetrieveTransactions\", options: {}, I: RetrieveTransactionsRequest, O: RetrieveTransactionsResponse },\n    { name: \"SubscribeTransactions\", serverStreaming: true, options: {}, I: SubscribeTransactionsRequest, O: SubscribeTransactionsResponse },\n    { name: \"RetrieveControllers\", options: {}, I: RetrieveControllersRequest, O: RetrieveControllersResponse },\n    { name: \"RetrieveTokenCollections\", options: {}, I: RetrieveTokenCollectionsRequest, O: RetrieveTokenCollectionsResponse },\n    { name: \"PublishMessage\", options: {}, I: PublishMessageRequest, O: PublishMessageResponse },\n    { name: \"PublishMessageBatch\", options: {}, I: PublishMessageBatchRequest, O: PublishMessageBatchResponse }\n]);\n","// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic\n// @generated from protobuf file \"types.proto\" (package \"types\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Primitive } from \"./schema\";\nimport { Struct } from \"./schema\";\n/**\n * @generated from protobuf message types.World\n */\nexport interface World {\n    /**\n     * The hex-encoded address of the world.\n     *\n     * @generated from protobuf field: string world_address = 1\n     */\n    worldAddress: string;\n    /**\n     * A list of metadata for all registered components in the world.\n     *\n     * @generated from protobuf field: repeated types.Model models = 2\n     */\n    models: Model[];\n}\n/**\n * @generated from protobuf message types.Model\n */\nexport interface Model {\n    /**\n     * Model selector\n     *\n     * @generated from protobuf field: bytes selector = 1\n     */\n    selector: Uint8Array;\n    /**\n     * Model namespace\n     *\n     * @generated from protobuf field: string namespace = 2\n     */\n    namespace: string;\n    /**\n     * Model name\n     *\n     * @generated from protobuf field: string name = 3\n     */\n    name: string;\n    /**\n     * Model size when it is packed for storage\n     *\n     * @generated from protobuf field: uint32 packed_size = 4\n     */\n    packedSize: number;\n    /**\n     * Model size when it is unpacked\n     *\n     * @generated from protobuf field: uint32 unpacked_size = 5\n     */\n    unpackedSize: number;\n    /**\n     * felt bytes of the class hash of the component\n     *\n     * @generated from protobuf field: bytes class_hash = 6\n     */\n    classHash: Uint8Array;\n    /**\n     * The layout of the component in bytes\n     *\n     * @generated from protobuf field: bytes layout = 7\n     */\n    layout: Uint8Array;\n    /**\n     * The schema of the component serialized in bytes (for simplicity sake)\n     *\n     * @generated from protobuf field: bytes schema = 8\n     */\n    schema: Uint8Array;\n    /**\n     * felt bytes of the contract address of the component\n     *\n     * @generated from protobuf field: bytes contract_address = 9\n     */\n    contractAddress: Uint8Array;\n}\n/**\n * @generated from protobuf message types.Entity\n */\nexport interface Entity {\n    /**\n     * The entity's hashed keys\n     *\n     * @generated from protobuf field: bytes hashed_keys = 1\n     */\n    hashedKeys: Uint8Array;\n    /**\n     * Models of the entity\n     *\n     * @generated from protobuf field: repeated types.Struct models = 2\n     */\n    models: Struct[];\n}\n/**\n * @generated from protobuf message types.Event\n */\nexport interface Event {\n    /**\n     * The event's keys\n     *\n     * @generated from protobuf field: repeated bytes keys = 1\n     */\n    keys: Uint8Array[];\n    /**\n     * Data of the event\n     *\n     * @generated from protobuf field: repeated bytes data = 2\n     */\n    data: Uint8Array[];\n    /**\n     * event's transaction hash\n     *\n     * @generated from protobuf field: bytes transaction_hash = 3\n     */\n    transactionHash: Uint8Array;\n}\n/**\n * @generated from protobuf message types.Query\n */\nexport interface Query {\n    /**\n     * @generated from protobuf field: types.Clause clause = 1\n     */\n    clause?: Clause;\n    /**\n     * @generated from protobuf field: bool no_hashed_keys = 2\n     */\n    noHashedKeys: boolean;\n    /**\n     * @generated from protobuf field: repeated string models = 3\n     */\n    models: string[];\n    /**\n     * @generated from protobuf field: types.Pagination pagination = 4\n     */\n    pagination?: Pagination;\n    /**\n     * @generated from protobuf field: bool historical = 5\n     */\n    historical: boolean;\n}\n/**\n * @generated from protobuf message types.EventQuery\n */\nexport interface EventQuery {\n    /**\n     * @generated from protobuf field: types.KeysClause keys = 1\n     */\n    keys?: KeysClause;\n    /**\n     * @generated from protobuf field: types.Pagination pagination = 2\n     */\n    pagination?: Pagination;\n}\n/**\n * @generated from protobuf message types.Clause\n */\nexport interface Clause {\n    /**\n     * @generated from protobuf oneof: clause_type\n     */\n    clauseType: {\n        oneofKind: \"hashedKeys\";\n        /**\n         * @generated from protobuf field: types.HashedKeysClause hashed_keys = 1\n         */\n        hashedKeys: HashedKeysClause;\n    } | {\n        oneofKind: \"keys\";\n        /**\n         * @generated from protobuf field: types.KeysClause keys = 2\n         */\n        keys: KeysClause;\n    } | {\n        oneofKind: \"member\";\n        /**\n         * @generated from protobuf field: types.MemberClause member = 3\n         */\n        member: MemberClause;\n    } | {\n        oneofKind: \"composite\";\n        /**\n         * @generated from protobuf field: types.CompositeClause composite = 4\n         */\n        composite: CompositeClause;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message types.KeysClause\n */\nexport interface KeysClause {\n    /**\n     * @generated from protobuf field: repeated bytes keys = 2\n     */\n    keys: Uint8Array[];\n    /**\n     * @generated from protobuf field: types.PatternMatching pattern_matching = 3\n     */\n    patternMatching: PatternMatching;\n    /**\n     * @generated from protobuf field: repeated string models = 4\n     */\n    models: string[];\n}\n/**\n * @generated from protobuf message types.HashedKeysClause\n */\nexport interface HashedKeysClause {\n    /**\n     * @generated from protobuf field: repeated bytes hashed_keys = 1\n     */\n    hashedKeys: Uint8Array[];\n}\n/**\n * @generated from protobuf message types.MemberValue\n */\nexport interface MemberValue {\n    /**\n     * @generated from protobuf oneof: value_type\n     */\n    valueType: {\n        oneofKind: \"primitive\";\n        /**\n         * @generated from protobuf field: types.Primitive primitive = 1\n         */\n        primitive: Primitive;\n    } | {\n        oneofKind: \"string\";\n        /**\n         * @generated from protobuf field: string string = 2\n         */\n        string: string;\n    } | {\n        oneofKind: \"list\";\n        /**\n         * @generated from protobuf field: types.MemberValueList list = 3\n         */\n        list: MemberValueList;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message types.MemberValueList\n */\nexport interface MemberValueList {\n    /**\n     * @generated from protobuf field: repeated types.MemberValue values = 1\n     */\n    values: MemberValue[];\n}\n/**\n * @generated from protobuf message types.MemberClause\n */\nexport interface MemberClause {\n    /**\n     * @generated from protobuf field: string model = 2\n     */\n    model: string;\n    /**\n     * @generated from protobuf field: string member = 3\n     */\n    member: string;\n    /**\n     * @generated from protobuf field: types.ComparisonOperator operator = 4\n     */\n    operator: ComparisonOperator;\n    /**\n     * @generated from protobuf field: types.MemberValue value = 5\n     */\n    value?: MemberValue;\n}\n/**\n * @generated from protobuf message types.CompositeClause\n */\nexport interface CompositeClause {\n    /**\n     * @generated from protobuf field: types.LogicalOperator operator = 3\n     */\n    operator: LogicalOperator;\n    /**\n     * @generated from protobuf field: repeated types.Clause clauses = 4\n     */\n    clauses: Clause[];\n}\n/**\n * @generated from protobuf message types.Token\n */\nexport interface Token {\n    /**\n     * @generated from protobuf field: optional bytes token_id = 1\n     */\n    tokenId?: Uint8Array;\n    /**\n     * @generated from protobuf field: bytes contract_address = 2\n     */\n    contractAddress: Uint8Array;\n    /**\n     * @generated from protobuf field: string name = 3\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string symbol = 4\n     */\n    symbol: string;\n    /**\n     * @generated from protobuf field: uint32 decimals = 5\n     */\n    decimals: number;\n    /**\n     * @generated from protobuf field: bytes metadata = 6\n     */\n    metadata: Uint8Array;\n}\n/**\n * @generated from protobuf message types.TokenCollection\n */\nexport interface TokenCollection {\n    /**\n     * @generated from protobuf field: bytes contract_address = 2\n     */\n    contractAddress: Uint8Array;\n    /**\n     * @generated from protobuf field: string name = 3\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string symbol = 4\n     */\n    symbol: string;\n    /**\n     * @generated from protobuf field: uint32 decimals = 5\n     */\n    decimals: number;\n    /**\n     * @generated from protobuf field: uint32 count = 6\n     */\n    count: number;\n    /**\n     * @generated from protobuf field: bytes metadata = 7\n     */\n    metadata: Uint8Array;\n}\n/**\n * @generated from protobuf message types.TokenBalance\n */\nexport interface TokenBalance {\n    /**\n     * @generated from protobuf field: bytes balance = 1\n     */\n    balance: Uint8Array;\n    /**\n     * @generated from protobuf field: bytes account_address = 2\n     */\n    accountAddress: Uint8Array;\n    /**\n     * @generated from protobuf field: bytes contract_address = 3\n     */\n    contractAddress: Uint8Array;\n    /**\n     * @generated from protobuf field: optional bytes token_id = 4\n     */\n    tokenId?: Uint8Array;\n}\n/**\n * @generated from protobuf message types.OrderBy\n */\nexport interface OrderBy {\n    /**\n     * @generated from protobuf field: string field = 1\n     */\n    field: string;\n    /**\n     * @generated from protobuf field: types.OrderDirection direction = 2\n     */\n    direction: OrderDirection;\n}\n/**\n * @generated from protobuf message types.Controller\n */\nexport interface Controller {\n    /**\n     * @generated from protobuf field: bytes address = 1\n     */\n    address: Uint8Array;\n    /**\n     * @generated from protobuf field: string username = 2\n     */\n    username: string;\n    /**\n     * @generated from protobuf field: uint64 deployed_at_timestamp = 3\n     */\n    deployedAtTimestamp: bigint;\n}\n/**\n * @generated from protobuf message types.Pagination\n */\nexport interface Pagination {\n    /**\n     * @generated from protobuf field: string cursor = 1\n     */\n    cursor: string;\n    /**\n     * @generated from protobuf field: uint32 limit = 2\n     */\n    limit: number;\n    /**\n     * @generated from protobuf field: types.PaginationDirection direction = 3\n     */\n    direction: PaginationDirection;\n    /**\n     * @generated from protobuf field: repeated types.OrderBy order_by = 4\n     */\n    orderBy: OrderBy[];\n}\n/**\n * @generated from protobuf message types.ControllerQuery\n */\nexport interface ControllerQuery {\n    /**\n     * The list of contract addresses to retrieve controllers for\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 1\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of usernames to retrieve controllers for\n     *\n     * @generated from protobuf field: repeated string usernames = 2\n     */\n    usernames: string[];\n    /**\n     * Pagination\n     *\n     * @generated from protobuf field: types.Pagination pagination = 3\n     */\n    pagination?: Pagination;\n}\n/**\n * A request to retrieve tokens\n *\n * @generated from protobuf message types.TokenQuery\n */\nexport interface TokenQuery {\n    /**\n     * The list of contract addresses to retrieve tokens for\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 1\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to retrieve tokens for\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 2\n     */\n    tokenIds: Uint8Array[];\n    /**\n     * Pagination\n     *\n     * @generated from protobuf field: types.Pagination pagination = 3\n     */\n    pagination?: Pagination;\n}\n/**\n * A request to retrieve token balances\n *\n * @generated from protobuf message types.TokenBalanceQuery\n */\nexport interface TokenBalanceQuery {\n    /**\n     * The account addresses to retrieve balances for\n     *\n     * @generated from protobuf field: repeated bytes account_addresses = 1\n     */\n    accountAddresses: Uint8Array[];\n    /**\n     * The list of token contract addresses to retrieve balances for\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 2\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of token IDs to retrieve balances for\n     *\n     * @generated from protobuf field: repeated bytes token_ids = 3\n     */\n    tokenIds: Uint8Array[];\n    /**\n     * Pagination\n     *\n     * @generated from protobuf field: types.Pagination pagination = 4\n     */\n    pagination?: Pagination;\n}\n/**\n * @generated from protobuf message types.TransactionCall\n */\nexport interface TransactionCall {\n    /**\n     * The contract address being called\n     *\n     * @generated from protobuf field: bytes contract_address = 1\n     */\n    contractAddress: Uint8Array;\n    /**\n     * The function name being called\n     *\n     * @generated from protobuf field: string entrypoint = 2\n     */\n    entrypoint: string;\n    /**\n     * The calldata for the function call\n     *\n     * @generated from protobuf field: repeated bytes calldata = 3\n     */\n    calldata: Uint8Array[];\n    /**\n     * The type of call (EXECUTE, EXECUTE_FROM_OUTSIDE)\n     *\n     * @generated from protobuf field: types.CallType call_type = 4\n     */\n    callType: CallType;\n    /**\n     * The address making the call\n     *\n     * @generated from protobuf field: bytes caller_address = 5\n     */\n    callerAddress: Uint8Array;\n}\n/**\n * @generated from protobuf message types.Transaction\n */\nexport interface Transaction {\n    /**\n     * The transaction hash\n     *\n     * @generated from protobuf field: bytes transaction_hash = 1\n     */\n    transactionHash: Uint8Array;\n    /**\n     * The sender address\n     *\n     * @generated from protobuf field: bytes sender_address = 2\n     */\n    senderAddress: Uint8Array;\n    /**\n     * The transaction calldata\n     *\n     * @generated from protobuf field: repeated bytes calldata = 3\n     */\n    calldata: Uint8Array[];\n    /**\n     * The maximum fee for the transaction\n     *\n     * @generated from protobuf field: bytes max_fee = 4\n     */\n    maxFee: Uint8Array;\n    /**\n     * The transaction signature\n     *\n     * @generated from protobuf field: repeated bytes signature = 5\n     */\n    signature: Uint8Array[];\n    /**\n     * The transaction nonce\n     *\n     * @generated from protobuf field: bytes nonce = 6\n     */\n    nonce: Uint8Array;\n    /**\n     * The block number the transaction was included in\n     *\n     * @generated from protobuf field: uint64 block_number = 7\n     */\n    blockNumber: bigint;\n    /**\n     * The transaction type (INVOKE, L1_HANDLER, etc.)\n     *\n     * @generated from protobuf field: string transaction_type = 8\n     */\n    transactionType: string;\n    /**\n     * The timestamp when the transaction was executed\n     *\n     * @generated from protobuf field: uint64 block_timestamp = 9\n     */\n    blockTimestamp: bigint;\n    /**\n     * The parsed calls within the transaction\n     *\n     * @generated from protobuf field: repeated types.TransactionCall calls = 10\n     */\n    calls: TransactionCall[];\n    /**\n     * The unique models associated with this transaction\n     *\n     * @generated from protobuf field: repeated bytes unique_models = 11\n     */\n    uniqueModels: Uint8Array[];\n}\n/**\n * @generated from protobuf message types.TransactionFilter\n */\nexport interface TransactionFilter {\n    /**\n     * The list of transaction hashes to retrieve\n     *\n     * @generated from protobuf field: repeated bytes transaction_hashes = 1\n     */\n    transactionHashes: Uint8Array[];\n    /**\n     * The list of caller addresses to filter by\n     *\n     * @generated from protobuf field: repeated bytes caller_addresses = 2\n     */\n    callerAddresses: Uint8Array[];\n    /**\n     * The list of contract addresses to filter by (calls made to these contracts)\n     *\n     * @generated from protobuf field: repeated bytes contract_addresses = 3\n     */\n    contractAddresses: Uint8Array[];\n    /**\n     * The list of entrypoints to filter by\n     *\n     * @generated from protobuf field: repeated string entrypoints = 4\n     */\n    entrypoints: string[];\n    /**\n     * The list of model selectors to filter by\n     *\n     * @generated from protobuf field: repeated bytes model_selectors = 5\n     */\n    modelSelectors: Uint8Array[];\n    /**\n     * The block number range to filter by\n     *\n     * @generated from protobuf field: optional uint64 from_block = 6\n     */\n    fromBlock?: bigint;\n    /**\n     * @generated from protobuf field: optional uint64 to_block = 7\n     */\n    toBlock?: bigint;\n}\n/**\n * @generated from protobuf message types.TransactionQuery\n */\nexport interface TransactionQuery {\n    /**\n     * The filter to apply to the query\n     *\n     * @generated from protobuf field: types.TransactionFilter filter = 1\n     */\n    filter?: TransactionFilter;\n    /**\n     * Pagination\n     *\n     * @generated from protobuf field: types.Pagination pagination = 2\n     */\n    pagination?: Pagination;\n}\n/**\n * @generated from protobuf enum types.PatternMatching\n */\nexport enum PatternMatching {\n    /**\n     * @generated from protobuf enum value: FixedLen = 0;\n     */\n    FixedLen = 0,\n    /**\n     * @generated from protobuf enum value: VariableLen = 1;\n     */\n    VariableLen = 1\n}\n/**\n * @generated from protobuf enum types.LogicalOperator\n */\nexport enum LogicalOperator {\n    /**\n     * @generated from protobuf enum value: AND = 0;\n     */\n    AND = 0,\n    /**\n     * @generated from protobuf enum value: OR = 1;\n     */\n    OR = 1\n}\n/**\n * @generated from protobuf enum types.ComparisonOperator\n */\nexport enum ComparisonOperator {\n    /**\n     * @generated from protobuf enum value: EQ = 0;\n     */\n    EQ = 0,\n    /**\n     * @generated from protobuf enum value: NEQ = 1;\n     */\n    NEQ = 1,\n    /**\n     * @generated from protobuf enum value: GT = 2;\n     */\n    GT = 2,\n    /**\n     * @generated from protobuf enum value: GTE = 3;\n     */\n    GTE = 3,\n    /**\n     * @generated from protobuf enum value: LT = 4;\n     */\n    LT = 4,\n    /**\n     * @generated from protobuf enum value: LTE = 5;\n     */\n    LTE = 5,\n    /**\n     * @generated from protobuf enum value: IN = 6;\n     */\n    IN = 6,\n    /**\n     * @generated from protobuf enum value: NOT_IN = 7;\n     */\n    NOT_IN = 7\n}\n/**\n * @generated from protobuf enum types.OrderDirection\n */\nexport enum OrderDirection {\n    /**\n     * @generated from protobuf enum value: ASC = 0;\n     */\n    ASC = 0,\n    /**\n     * @generated from protobuf enum value: DESC = 1;\n     */\n    DESC = 1\n}\n/**\n * @generated from protobuf enum types.PaginationDirection\n */\nexport enum PaginationDirection {\n    /**\n     * @generated from protobuf enum value: FORWARD = 0;\n     */\n    FORWARD = 0,\n    /**\n     * @generated from protobuf enum value: BACKWARD = 1;\n     */\n    BACKWARD = 1\n}\n/**\n * @generated from protobuf enum types.CallType\n */\nexport enum CallType {\n    /**\n     * @generated from protobuf enum value: EXECUTE = 0;\n     */\n    EXECUTE = 0,\n    /**\n     * @generated from protobuf enum value: EXECUTE_FROM_OUTSIDE = 1;\n     */\n    EXECUTE_FROM_OUTSIDE = 1\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass World$Type extends MessageType<World> {\n    constructor() {\n        super(\"types.World\", [\n            { no: 1, name: \"world_address\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"models\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Model }\n        ]);\n    }\n    create(value?: PartialMessage<World>): World {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.worldAddress = \"\";\n        message.models = [];\n        if (value !== undefined)\n            reflectionMergePartial<World>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: World): World {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string world_address */ 1:\n                    message.worldAddress = reader.string();\n                    break;\n                case /* repeated types.Model models */ 2:\n                    message.models.push(Model.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: World, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string world_address = 1; */\n        if (message.worldAddress !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.worldAddress);\n        /* repeated types.Model models = 2; */\n        for (let i = 0; i < message.models.length; i++)\n            Model.internalBinaryWrite(message.models[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.World\n */\nexport const World = new World$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Model$Type extends MessageType<Model> {\n    constructor() {\n        super(\"types.Model\", [\n            { no: 1, name: \"selector\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"namespace\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"packed_size\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 5, name: \"unpacked_size\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 6, name: \"class_hash\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 7, name: \"layout\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 8, name: \"schema\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 9, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Model>): Model {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.selector = new Uint8Array(0);\n        message.namespace = \"\";\n        message.name = \"\";\n        message.packedSize = 0;\n        message.unpackedSize = 0;\n        message.classHash = new Uint8Array(0);\n        message.layout = new Uint8Array(0);\n        message.schema = new Uint8Array(0);\n        message.contractAddress = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<Model>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Model): Model {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes selector */ 1:\n                    message.selector = reader.bytes();\n                    break;\n                case /* string namespace */ 2:\n                    message.namespace = reader.string();\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* uint32 packed_size */ 4:\n                    message.packedSize = reader.uint32();\n                    break;\n                case /* uint32 unpacked_size */ 5:\n                    message.unpackedSize = reader.uint32();\n                    break;\n                case /* bytes class_hash */ 6:\n                    message.classHash = reader.bytes();\n                    break;\n                case /* bytes layout */ 7:\n                    message.layout = reader.bytes();\n                    break;\n                case /* bytes schema */ 8:\n                    message.schema = reader.bytes();\n                    break;\n                case /* bytes contract_address */ 9:\n                    message.contractAddress = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Model, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes selector = 1; */\n        if (message.selector.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.selector);\n        /* string namespace = 2; */\n        if (message.namespace !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.namespace);\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* uint32 packed_size = 4; */\n        if (message.packedSize !== 0)\n            writer.tag(4, WireType.Varint).uint32(message.packedSize);\n        /* uint32 unpacked_size = 5; */\n        if (message.unpackedSize !== 0)\n            writer.tag(5, WireType.Varint).uint32(message.unpackedSize);\n        /* bytes class_hash = 6; */\n        if (message.classHash.length)\n            writer.tag(6, WireType.LengthDelimited).bytes(message.classHash);\n        /* bytes layout = 7; */\n        if (message.layout.length)\n            writer.tag(7, WireType.LengthDelimited).bytes(message.layout);\n        /* bytes schema = 8; */\n        if (message.schema.length)\n            writer.tag(8, WireType.LengthDelimited).bytes(message.schema);\n        /* bytes contract_address = 9; */\n        if (message.contractAddress.length)\n            writer.tag(9, WireType.LengthDelimited).bytes(message.contractAddress);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Model\n */\nexport const Model = new Model$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Entity$Type extends MessageType<Entity> {\n    constructor() {\n        super(\"types.Entity\", [\n            { no: 1, name: \"hashed_keys\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"models\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Struct }\n        ]);\n    }\n    create(value?: PartialMessage<Entity>): Entity {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.hashedKeys = new Uint8Array(0);\n        message.models = [];\n        if (value !== undefined)\n            reflectionMergePartial<Entity>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Entity): Entity {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes hashed_keys */ 1:\n                    message.hashedKeys = reader.bytes();\n                    break;\n                case /* repeated types.Struct models */ 2:\n                    message.models.push(Struct.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Entity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes hashed_keys = 1; */\n        if (message.hashedKeys.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.hashedKeys);\n        /* repeated types.Struct models = 2; */\n        for (let i = 0; i < message.models.length; i++)\n            Struct.internalBinaryWrite(message.models[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Entity\n */\nexport const Entity = new Entity$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Event$Type extends MessageType<Event> {\n    constructor() {\n        super(\"types.Event\", [\n            { no: 1, name: \"keys\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"data\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"transaction_hash\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Event>): Event {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.keys = [];\n        message.data = [];\n        message.transactionHash = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<Event>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes keys */ 1:\n                    message.keys.push(reader.bytes());\n                    break;\n                case /* repeated bytes data */ 2:\n                    message.data.push(reader.bytes());\n                    break;\n                case /* bytes transaction_hash */ 3:\n                    message.transactionHash = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes keys = 1; */\n        for (let i = 0; i < message.keys.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.keys[i]);\n        /* repeated bytes data = 2; */\n        for (let i = 0; i < message.data.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.data[i]);\n        /* bytes transaction_hash = 3; */\n        if (message.transactionHash.length)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.transactionHash);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Event\n */\nexport const Event = new Event$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Query$Type extends MessageType<Query> {\n    constructor() {\n        super(\"types.Query\", [\n            { no: 1, name: \"clause\", kind: \"message\", T: () => Clause },\n            { no: 2, name: \"no_hashed_keys\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"models\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"pagination\", kind: \"message\", T: () => Pagination },\n            { no: 5, name: \"historical\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Query>): Query {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.noHashedKeys = false;\n        message.models = [];\n        message.historical = false;\n        if (value !== undefined)\n            reflectionMergePartial<Query>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query): Query {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Clause clause */ 1:\n                    message.clause = Clause.internalBinaryRead(reader, reader.uint32(), options, message.clause);\n                    break;\n                case /* bool no_hashed_keys */ 2:\n                    message.noHashedKeys = reader.bool();\n                    break;\n                case /* repeated string models */ 3:\n                    message.models.push(reader.string());\n                    break;\n                case /* types.Pagination pagination */ 4:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                case /* bool historical */ 5:\n                    message.historical = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Query, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Clause clause = 1; */\n        if (message.clause)\n            Clause.internalBinaryWrite(message.clause, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool no_hashed_keys = 2; */\n        if (message.noHashedKeys !== false)\n            writer.tag(2, WireType.Varint).bool(message.noHashedKeys);\n        /* repeated string models = 3; */\n        for (let i = 0; i < message.models.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.models[i]);\n        /* types.Pagination pagination = 4; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool historical = 5; */\n        if (message.historical !== false)\n            writer.tag(5, WireType.Varint).bool(message.historical);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Query\n */\nexport const Query = new Query$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EventQuery$Type extends MessageType<EventQuery> {\n    constructor() {\n        super(\"types.EventQuery\", [\n            { no: 1, name: \"keys\", kind: \"message\", T: () => KeysClause },\n            { no: 2, name: \"pagination\", kind: \"message\", T: () => Pagination }\n        ]);\n    }\n    create(value?: PartialMessage<EventQuery>): EventQuery {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<EventQuery>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventQuery): EventQuery {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.KeysClause keys */ 1:\n                    message.keys = KeysClause.internalBinaryRead(reader, reader.uint32(), options, message.keys);\n                    break;\n                case /* types.Pagination pagination */ 2:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EventQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.KeysClause keys = 1; */\n        if (message.keys)\n            KeysClause.internalBinaryWrite(message.keys, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* types.Pagination pagination = 2; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.EventQuery\n */\nexport const EventQuery = new EventQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Clause$Type extends MessageType<Clause> {\n    constructor() {\n        super(\"types.Clause\", [\n            { no: 1, name: \"hashed_keys\", kind: \"message\", oneof: \"clauseType\", T: () => HashedKeysClause },\n            { no: 2, name: \"keys\", kind: \"message\", oneof: \"clauseType\", T: () => KeysClause },\n            { no: 3, name: \"member\", kind: \"message\", oneof: \"clauseType\", T: () => MemberClause },\n            { no: 4, name: \"composite\", kind: \"message\", oneof: \"clauseType\", T: () => CompositeClause }\n        ]);\n    }\n    create(value?: PartialMessage<Clause>): Clause {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.clauseType = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<Clause>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Clause): Clause {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.HashedKeysClause hashed_keys */ 1:\n                    message.clauseType = {\n                        oneofKind: \"hashedKeys\",\n                        hashedKeys: HashedKeysClause.internalBinaryRead(reader, reader.uint32(), options, (message.clauseType as any).hashedKeys)\n                    };\n                    break;\n                case /* types.KeysClause keys */ 2:\n                    message.clauseType = {\n                        oneofKind: \"keys\",\n                        keys: KeysClause.internalBinaryRead(reader, reader.uint32(), options, (message.clauseType as any).keys)\n                    };\n                    break;\n                case /* types.MemberClause member */ 3:\n                    message.clauseType = {\n                        oneofKind: \"member\",\n                        member: MemberClause.internalBinaryRead(reader, reader.uint32(), options, (message.clauseType as any).member)\n                    };\n                    break;\n                case /* types.CompositeClause composite */ 4:\n                    message.clauseType = {\n                        oneofKind: \"composite\",\n                        composite: CompositeClause.internalBinaryRead(reader, reader.uint32(), options, (message.clauseType as any).composite)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Clause, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.HashedKeysClause hashed_keys = 1; */\n        if (message.clauseType.oneofKind === \"hashedKeys\")\n            HashedKeysClause.internalBinaryWrite(message.clauseType.hashedKeys, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* types.KeysClause keys = 2; */\n        if (message.clauseType.oneofKind === \"keys\")\n            KeysClause.internalBinaryWrite(message.clauseType.keys, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* types.MemberClause member = 3; */\n        if (message.clauseType.oneofKind === \"member\")\n            MemberClause.internalBinaryWrite(message.clauseType.member, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* types.CompositeClause composite = 4; */\n        if (message.clauseType.oneofKind === \"composite\")\n            CompositeClause.internalBinaryWrite(message.clauseType.composite, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Clause\n */\nexport const Clause = new Clause$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass KeysClause$Type extends MessageType<KeysClause> {\n    constructor() {\n        super(\"types.KeysClause\", [\n            { no: 2, name: \"keys\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"pattern_matching\", kind: \"enum\", T: () => [\"types.PatternMatching\", PatternMatching] },\n            { no: 4, name: \"models\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<KeysClause>): KeysClause {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.keys = [];\n        message.patternMatching = 0;\n        message.models = [];\n        if (value !== undefined)\n            reflectionMergePartial<KeysClause>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeysClause): KeysClause {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes keys */ 2:\n                    message.keys.push(reader.bytes());\n                    break;\n                case /* types.PatternMatching pattern_matching */ 3:\n                    message.patternMatching = reader.int32();\n                    break;\n                case /* repeated string models */ 4:\n                    message.models.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: KeysClause, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes keys = 2; */\n        for (let i = 0; i < message.keys.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.keys[i]);\n        /* types.PatternMatching pattern_matching = 3; */\n        if (message.patternMatching !== 0)\n            writer.tag(3, WireType.Varint).int32(message.patternMatching);\n        /* repeated string models = 4; */\n        for (let i = 0; i < message.models.length; i++)\n            writer.tag(4, WireType.LengthDelimited).string(message.models[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.KeysClause\n */\nexport const KeysClause = new KeysClause$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HashedKeysClause$Type extends MessageType<HashedKeysClause> {\n    constructor() {\n        super(\"types.HashedKeysClause\", [\n            { no: 1, name: \"hashed_keys\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HashedKeysClause>): HashedKeysClause {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.hashedKeys = [];\n        if (value !== undefined)\n            reflectionMergePartial<HashedKeysClause>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HashedKeysClause): HashedKeysClause {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes hashed_keys */ 1:\n                    message.hashedKeys.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HashedKeysClause, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes hashed_keys = 1; */\n        for (let i = 0; i < message.hashedKeys.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.hashedKeys[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.HashedKeysClause\n */\nexport const HashedKeysClause = new HashedKeysClause$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MemberValue$Type extends MessageType<MemberValue> {\n    constructor() {\n        super(\"types.MemberValue\", [\n            { no: 1, name: \"primitive\", kind: \"message\", oneof: \"valueType\", T: () => Primitive },\n            { no: 2, name: \"string\", kind: \"scalar\", oneof: \"valueType\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"list\", kind: \"message\", oneof: \"valueType\", T: () => MemberValueList }\n        ]);\n    }\n    create(value?: PartialMessage<MemberValue>): MemberValue {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.valueType = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<MemberValue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberValue): MemberValue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Primitive primitive */ 1:\n                    message.valueType = {\n                        oneofKind: \"primitive\",\n                        primitive: Primitive.internalBinaryRead(reader, reader.uint32(), options, (message.valueType as any).primitive)\n                    };\n                    break;\n                case /* string string */ 2:\n                    message.valueType = {\n                        oneofKind: \"string\",\n                        string: reader.string()\n                    };\n                    break;\n                case /* types.MemberValueList list */ 3:\n                    message.valueType = {\n                        oneofKind: \"list\",\n                        list: MemberValueList.internalBinaryRead(reader, reader.uint32(), options, (message.valueType as any).list)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MemberValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Primitive primitive = 1; */\n        if (message.valueType.oneofKind === \"primitive\")\n            Primitive.internalBinaryWrite(message.valueType.primitive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string string = 2; */\n        if (message.valueType.oneofKind === \"string\")\n            writer.tag(2, WireType.LengthDelimited).string(message.valueType.string);\n        /* types.MemberValueList list = 3; */\n        if (message.valueType.oneofKind === \"list\")\n            MemberValueList.internalBinaryWrite(message.valueType.list, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.MemberValue\n */\nexport const MemberValue = new MemberValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MemberValueList$Type extends MessageType<MemberValueList> {\n    constructor() {\n        super(\"types.MemberValueList\", [\n            { no: 1, name: \"values\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MemberValue }\n        ]);\n    }\n    create(value?: PartialMessage<MemberValueList>): MemberValueList {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.values = [];\n        if (value !== undefined)\n            reflectionMergePartial<MemberValueList>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberValueList): MemberValueList {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated types.MemberValue values */ 1:\n                    message.values.push(MemberValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MemberValueList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated types.MemberValue values = 1; */\n        for (let i = 0; i < message.values.length; i++)\n            MemberValue.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.MemberValueList\n */\nexport const MemberValueList = new MemberValueList$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MemberClause$Type extends MessageType<MemberClause> {\n    constructor() {\n        super(\"types.MemberClause\", [\n            { no: 2, name: \"model\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"member\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"operator\", kind: \"enum\", T: () => [\"types.ComparisonOperator\", ComparisonOperator] },\n            { no: 5, name: \"value\", kind: \"message\", T: () => MemberValue }\n        ]);\n    }\n    create(value?: PartialMessage<MemberClause>): MemberClause {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.model = \"\";\n        message.member = \"\";\n        message.operator = 0;\n        if (value !== undefined)\n            reflectionMergePartial<MemberClause>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberClause): MemberClause {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string model */ 2:\n                    message.model = reader.string();\n                    break;\n                case /* string member */ 3:\n                    message.member = reader.string();\n                    break;\n                case /* types.ComparisonOperator operator */ 4:\n                    message.operator = reader.int32();\n                    break;\n                case /* types.MemberValue value */ 5:\n                    message.value = MemberValue.internalBinaryRead(reader, reader.uint32(), options, message.value);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MemberClause, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string model = 2; */\n        if (message.model !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.model);\n        /* string member = 3; */\n        if (message.member !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.member);\n        /* types.ComparisonOperator operator = 4; */\n        if (message.operator !== 0)\n            writer.tag(4, WireType.Varint).int32(message.operator);\n        /* types.MemberValue value = 5; */\n        if (message.value)\n            MemberValue.internalBinaryWrite(message.value, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.MemberClause\n */\nexport const MemberClause = new MemberClause$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CompositeClause$Type extends MessageType<CompositeClause> {\n    constructor() {\n        super(\"types.CompositeClause\", [\n            { no: 3, name: \"operator\", kind: \"enum\", T: () => [\"types.LogicalOperator\", LogicalOperator] },\n            { no: 4, name: \"clauses\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Clause }\n        ]);\n    }\n    create(value?: PartialMessage<CompositeClause>): CompositeClause {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.operator = 0;\n        message.clauses = [];\n        if (value !== undefined)\n            reflectionMergePartial<CompositeClause>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompositeClause): CompositeClause {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.LogicalOperator operator */ 3:\n                    message.operator = reader.int32();\n                    break;\n                case /* repeated types.Clause clauses */ 4:\n                    message.clauses.push(Clause.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CompositeClause, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.LogicalOperator operator = 3; */\n        if (message.operator !== 0)\n            writer.tag(3, WireType.Varint).int32(message.operator);\n        /* repeated types.Clause clauses = 4; */\n        for (let i = 0; i < message.clauses.length; i++)\n            Clause.internalBinaryWrite(message.clauses[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.CompositeClause\n */\nexport const CompositeClause = new CompositeClause$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Token$Type extends MessageType<Token> {\n    constructor() {\n        super(\"types.Token\", [\n            { no: 1, name: \"token_id\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"symbol\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"decimals\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 6, name: \"metadata\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Token>): Token {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddress = new Uint8Array(0);\n        message.name = \"\";\n        message.symbol = \"\";\n        message.decimals = 0;\n        message.metadata = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<Token>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* optional bytes token_id */ 1:\n                    message.tokenId = reader.bytes();\n                    break;\n                case /* bytes contract_address */ 2:\n                    message.contractAddress = reader.bytes();\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* string symbol */ 4:\n                    message.symbol = reader.string();\n                    break;\n                case /* uint32 decimals */ 5:\n                    message.decimals = reader.uint32();\n                    break;\n                case /* bytes metadata */ 6:\n                    message.metadata = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* optional bytes token_id = 1; */\n        if (message.tokenId !== undefined)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.tokenId);\n        /* bytes contract_address = 2; */\n        if (message.contractAddress.length)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddress);\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* string symbol = 4; */\n        if (message.symbol !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.symbol);\n        /* uint32 decimals = 5; */\n        if (message.decimals !== 0)\n            writer.tag(5, WireType.Varint).uint32(message.decimals);\n        /* bytes metadata = 6; */\n        if (message.metadata.length)\n            writer.tag(6, WireType.LengthDelimited).bytes(message.metadata);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Token\n */\nexport const Token = new Token$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenCollection$Type extends MessageType<TokenCollection> {\n    constructor() {\n        super(\"types.TokenCollection\", [\n            { no: 2, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"symbol\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"decimals\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 6, name: \"count\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 7, name: \"metadata\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TokenCollection>): TokenCollection {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddress = new Uint8Array(0);\n        message.name = \"\";\n        message.symbol = \"\";\n        message.decimals = 0;\n        message.count = 0;\n        message.metadata = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<TokenCollection>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenCollection): TokenCollection {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes contract_address */ 2:\n                    message.contractAddress = reader.bytes();\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* string symbol */ 4:\n                    message.symbol = reader.string();\n                    break;\n                case /* uint32 decimals */ 5:\n                    message.decimals = reader.uint32();\n                    break;\n                case /* uint32 count */ 6:\n                    message.count = reader.uint32();\n                    break;\n                case /* bytes metadata */ 7:\n                    message.metadata = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TokenCollection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes contract_address = 2; */\n        if (message.contractAddress.length)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddress);\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* string symbol = 4; */\n        if (message.symbol !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.symbol);\n        /* uint32 decimals = 5; */\n        if (message.decimals !== 0)\n            writer.tag(5, WireType.Varint).uint32(message.decimals);\n        /* uint32 count = 6; */\n        if (message.count !== 0)\n            writer.tag(6, WireType.Varint).uint32(message.count);\n        /* bytes metadata = 7; */\n        if (message.metadata.length)\n            writer.tag(7, WireType.LengthDelimited).bytes(message.metadata);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TokenCollection\n */\nexport const TokenCollection = new TokenCollection$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenBalance$Type extends MessageType<TokenBalance> {\n    constructor() {\n        super(\"types.TokenBalance\", [\n            { no: 1, name: \"balance\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"account_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"token_id\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TokenBalance>): TokenBalance {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.balance = new Uint8Array(0);\n        message.accountAddress = new Uint8Array(0);\n        message.contractAddress = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<TokenBalance>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenBalance): TokenBalance {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes balance */ 1:\n                    message.balance = reader.bytes();\n                    break;\n                case /* bytes account_address */ 2:\n                    message.accountAddress = reader.bytes();\n                    break;\n                case /* bytes contract_address */ 3:\n                    message.contractAddress = reader.bytes();\n                    break;\n                case /* optional bytes token_id */ 4:\n                    message.tokenId = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TokenBalance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes balance = 1; */\n        if (message.balance.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.balance);\n        /* bytes account_address = 2; */\n        if (message.accountAddress.length)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.accountAddress);\n        /* bytes contract_address = 3; */\n        if (message.contractAddress.length)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.contractAddress);\n        /* optional bytes token_id = 4; */\n        if (message.tokenId !== undefined)\n            writer.tag(4, WireType.LengthDelimited).bytes(message.tokenId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TokenBalance\n */\nexport const TokenBalance = new TokenBalance$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OrderBy$Type extends MessageType<OrderBy> {\n    constructor() {\n        super(\"types.OrderBy\", [\n            { no: 1, name: \"field\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"direction\", kind: \"enum\", T: () => [\"types.OrderDirection\", OrderDirection] }\n        ]);\n    }\n    create(value?: PartialMessage<OrderBy>): OrderBy {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.field = \"\";\n        message.direction = 0;\n        if (value !== undefined)\n            reflectionMergePartial<OrderBy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBy): OrderBy {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string field */ 1:\n                    message.field = reader.string();\n                    break;\n                case /* types.OrderDirection direction */ 2:\n                    message.direction = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: OrderBy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string field = 1; */\n        if (message.field !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.field);\n        /* types.OrderDirection direction = 2; */\n        if (message.direction !== 0)\n            writer.tag(2, WireType.Varint).int32(message.direction);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.OrderBy\n */\nexport const OrderBy = new OrderBy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Controller$Type extends MessageType<Controller> {\n    constructor() {\n        super(\"types.Controller\", [\n            { no: 1, name: \"address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"username\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"deployed_at_timestamp\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Controller>): Controller {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.address = new Uint8Array(0);\n        message.username = \"\";\n        message.deployedAtTimestamp = 0n;\n        if (value !== undefined)\n            reflectionMergePartial<Controller>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Controller): Controller {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes address */ 1:\n                    message.address = reader.bytes();\n                    break;\n                case /* string username */ 2:\n                    message.username = reader.string();\n                    break;\n                case /* uint64 deployed_at_timestamp */ 3:\n                    message.deployedAtTimestamp = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Controller, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes address = 1; */\n        if (message.address.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.address);\n        /* string username = 2; */\n        if (message.username !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.username);\n        /* uint64 deployed_at_timestamp = 3; */\n        if (message.deployedAtTimestamp !== 0n)\n            writer.tag(3, WireType.Varint).uint64(message.deployedAtTimestamp);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Controller\n */\nexport const Controller = new Controller$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pagination$Type extends MessageType<Pagination> {\n    constructor() {\n        super(\"types.Pagination\", [\n            { no: 1, name: \"cursor\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"limit\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 3, name: \"direction\", kind: \"enum\", T: () => [\"types.PaginationDirection\", PaginationDirection] },\n            { no: 4, name: \"order_by\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderBy }\n        ]);\n    }\n    create(value?: PartialMessage<Pagination>): Pagination {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.cursor = \"\";\n        message.limit = 0;\n        message.direction = 0;\n        message.orderBy = [];\n        if (value !== undefined)\n            reflectionMergePartial<Pagination>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pagination): Pagination {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string cursor */ 1:\n                    message.cursor = reader.string();\n                    break;\n                case /* uint32 limit */ 2:\n                    message.limit = reader.uint32();\n                    break;\n                case /* types.PaginationDirection direction */ 3:\n                    message.direction = reader.int32();\n                    break;\n                case /* repeated types.OrderBy order_by */ 4:\n                    message.orderBy.push(OrderBy.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Pagination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string cursor = 1; */\n        if (message.cursor !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.cursor);\n        /* uint32 limit = 2; */\n        if (message.limit !== 0)\n            writer.tag(2, WireType.Varint).uint32(message.limit);\n        /* types.PaginationDirection direction = 3; */\n        if (message.direction !== 0)\n            writer.tag(3, WireType.Varint).int32(message.direction);\n        /* repeated types.OrderBy order_by = 4; */\n        for (let i = 0; i < message.orderBy.length; i++)\n            OrderBy.internalBinaryWrite(message.orderBy[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Pagination\n */\nexport const Pagination = new Pagination$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ControllerQuery$Type extends MessageType<ControllerQuery> {\n    constructor() {\n        super(\"types.ControllerQuery\", [\n            { no: 1, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"usernames\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"pagination\", kind: \"message\", T: () => Pagination }\n        ]);\n    }\n    create(value?: PartialMessage<ControllerQuery>): ControllerQuery {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddresses = [];\n        message.usernames = [];\n        if (value !== undefined)\n            reflectionMergePartial<ControllerQuery>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerQuery): ControllerQuery {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes contract_addresses */ 1:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated string usernames */ 2:\n                    message.usernames.push(reader.string());\n                    break;\n                case /* types.Pagination pagination */ 3:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ControllerQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes contract_addresses = 1; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated string usernames = 2; */\n        for (let i = 0; i < message.usernames.length; i++)\n            writer.tag(2, WireType.LengthDelimited).string(message.usernames[i]);\n        /* types.Pagination pagination = 3; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.ControllerQuery\n */\nexport const ControllerQuery = new ControllerQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenQuery$Type extends MessageType<TokenQuery> {\n    constructor() {\n        super(\"types.TokenQuery\", [\n            { no: 1, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"pagination\", kind: \"message\", T: () => Pagination }\n        ]);\n    }\n    create(value?: PartialMessage<TokenQuery>): TokenQuery {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<TokenQuery>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenQuery): TokenQuery {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes contract_addresses */ 1:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 2:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                case /* types.Pagination pagination */ 3:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TokenQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes contract_addresses = 1; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes token_ids = 2; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        /* types.Pagination pagination = 3; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TokenQuery\n */\nexport const TokenQuery = new TokenQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenBalanceQuery$Type extends MessageType<TokenBalanceQuery> {\n    constructor() {\n        super(\"types.TokenBalanceQuery\", [\n            { no: 1, name: \"account_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"token_ids\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"pagination\", kind: \"message\", T: () => Pagination }\n        ]);\n    }\n    create(value?: PartialMessage<TokenBalanceQuery>): TokenBalanceQuery {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.accountAddresses = [];\n        message.contractAddresses = [];\n        message.tokenIds = [];\n        if (value !== undefined)\n            reflectionMergePartial<TokenBalanceQuery>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenBalanceQuery): TokenBalanceQuery {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes account_addresses */ 1:\n                    message.accountAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes contract_addresses */ 2:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes token_ids */ 3:\n                    message.tokenIds.push(reader.bytes());\n                    break;\n                case /* types.Pagination pagination */ 4:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TokenBalanceQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes account_addresses = 1; */\n        for (let i = 0; i < message.accountAddresses.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.accountAddresses[i]);\n        /* repeated bytes contract_addresses = 2; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated bytes token_ids = 3; */\n        for (let i = 0; i < message.tokenIds.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.tokenIds[i]);\n        /* types.Pagination pagination = 4; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TokenBalanceQuery\n */\nexport const TokenBalanceQuery = new TokenBalanceQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionCall$Type extends MessageType<TransactionCall> {\n    constructor() {\n        super(\"types.TransactionCall\", [\n            { no: 1, name: \"contract_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"entrypoint\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"calldata\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"call_type\", kind: \"enum\", T: () => [\"types.CallType\", CallType] },\n            { no: 5, name: \"caller_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TransactionCall>): TransactionCall {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.contractAddress = new Uint8Array(0);\n        message.entrypoint = \"\";\n        message.calldata = [];\n        message.callType = 0;\n        message.callerAddress = new Uint8Array(0);\n        if (value !== undefined)\n            reflectionMergePartial<TransactionCall>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionCall): TransactionCall {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes contract_address */ 1:\n                    message.contractAddress = reader.bytes();\n                    break;\n                case /* string entrypoint */ 2:\n                    message.entrypoint = reader.string();\n                    break;\n                case /* repeated bytes calldata */ 3:\n                    message.calldata.push(reader.bytes());\n                    break;\n                case /* types.CallType call_type */ 4:\n                    message.callType = reader.int32();\n                    break;\n                case /* bytes caller_address */ 5:\n                    message.callerAddress = reader.bytes();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TransactionCall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes contract_address = 1; */\n        if (message.contractAddress.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.contractAddress);\n        /* string entrypoint = 2; */\n        if (message.entrypoint !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.entrypoint);\n        /* repeated bytes calldata = 3; */\n        for (let i = 0; i < message.calldata.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.calldata[i]);\n        /* types.CallType call_type = 4; */\n        if (message.callType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.callType);\n        /* bytes caller_address = 5; */\n        if (message.callerAddress.length)\n            writer.tag(5, WireType.LengthDelimited).bytes(message.callerAddress);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TransactionCall\n */\nexport const TransactionCall = new TransactionCall$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Transaction$Type extends MessageType<Transaction> {\n    constructor() {\n        super(\"types.Transaction\", [\n            { no: 1, name: \"transaction_hash\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"sender_address\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"calldata\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"max_fee\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 5, name: \"signature\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 6, name: \"nonce\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 7, name: \"block_number\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"transaction_type\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 9, name: \"block_timestamp\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 10, name: \"calls\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TransactionCall },\n            { no: 11, name: \"unique_models\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Transaction>): Transaction {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.transactionHash = new Uint8Array(0);\n        message.senderAddress = new Uint8Array(0);\n        message.calldata = [];\n        message.maxFee = new Uint8Array(0);\n        message.signature = [];\n        message.nonce = new Uint8Array(0);\n        message.blockNumber = 0n;\n        message.transactionType = \"\";\n        message.blockTimestamp = 0n;\n        message.calls = [];\n        message.uniqueModels = [];\n        if (value !== undefined)\n            reflectionMergePartial<Transaction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Transaction): Transaction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bytes transaction_hash */ 1:\n                    message.transactionHash = reader.bytes();\n                    break;\n                case /* bytes sender_address */ 2:\n                    message.senderAddress = reader.bytes();\n                    break;\n                case /* repeated bytes calldata */ 3:\n                    message.calldata.push(reader.bytes());\n                    break;\n                case /* bytes max_fee */ 4:\n                    message.maxFee = reader.bytes();\n                    break;\n                case /* repeated bytes signature */ 5:\n                    message.signature.push(reader.bytes());\n                    break;\n                case /* bytes nonce */ 6:\n                    message.nonce = reader.bytes();\n                    break;\n                case /* uint64 block_number */ 7:\n                    message.blockNumber = reader.uint64().toBigInt();\n                    break;\n                case /* string transaction_type */ 8:\n                    message.transactionType = reader.string();\n                    break;\n                case /* uint64 block_timestamp */ 9:\n                    message.blockTimestamp = reader.uint64().toBigInt();\n                    break;\n                case /* repeated types.TransactionCall calls */ 10:\n                    message.calls.push(TransactionCall.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated bytes unique_models */ 11:\n                    message.uniqueModels.push(reader.bytes());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bytes transaction_hash = 1; */\n        if (message.transactionHash.length)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.transactionHash);\n        /* bytes sender_address = 2; */\n        if (message.senderAddress.length)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.senderAddress);\n        /* repeated bytes calldata = 3; */\n        for (let i = 0; i < message.calldata.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.calldata[i]);\n        /* bytes max_fee = 4; */\n        if (message.maxFee.length)\n            writer.tag(4, WireType.LengthDelimited).bytes(message.maxFee);\n        /* repeated bytes signature = 5; */\n        for (let i = 0; i < message.signature.length; i++)\n            writer.tag(5, WireType.LengthDelimited).bytes(message.signature[i]);\n        /* bytes nonce = 6; */\n        if (message.nonce.length)\n            writer.tag(6, WireType.LengthDelimited).bytes(message.nonce);\n        /* uint64 block_number = 7; */\n        if (message.blockNumber !== 0n)\n            writer.tag(7, WireType.Varint).uint64(message.blockNumber);\n        /* string transaction_type = 8; */\n        if (message.transactionType !== \"\")\n            writer.tag(8, WireType.LengthDelimited).string(message.transactionType);\n        /* uint64 block_timestamp = 9; */\n        if (message.blockTimestamp !== 0n)\n            writer.tag(9, WireType.Varint).uint64(message.blockTimestamp);\n        /* repeated types.TransactionCall calls = 10; */\n        for (let i = 0; i < message.calls.length; i++)\n            TransactionCall.internalBinaryWrite(message.calls[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated bytes unique_models = 11; */\n        for (let i = 0; i < message.uniqueModels.length; i++)\n            writer.tag(11, WireType.LengthDelimited).bytes(message.uniqueModels[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Transaction\n */\nexport const Transaction = new Transaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionFilter$Type extends MessageType<TransactionFilter> {\n    constructor() {\n        super(\"types.TransactionFilter\", [\n            { no: 1, name: \"transaction_hashes\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"caller_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"contract_addresses\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"entrypoints\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"model_selectors\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 6, name: \"from_block\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 7, name: \"to_block\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TransactionFilter>): TransactionFilter {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.transactionHashes = [];\n        message.callerAddresses = [];\n        message.contractAddresses = [];\n        message.entrypoints = [];\n        message.modelSelectors = [];\n        if (value !== undefined)\n            reflectionMergePartial<TransactionFilter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionFilter): TransactionFilter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated bytes transaction_hashes */ 1:\n                    message.transactionHashes.push(reader.bytes());\n                    break;\n                case /* repeated bytes caller_addresses */ 2:\n                    message.callerAddresses.push(reader.bytes());\n                    break;\n                case /* repeated bytes contract_addresses */ 3:\n                    message.contractAddresses.push(reader.bytes());\n                    break;\n                case /* repeated string entrypoints */ 4:\n                    message.entrypoints.push(reader.string());\n                    break;\n                case /* repeated bytes model_selectors */ 5:\n                    message.modelSelectors.push(reader.bytes());\n                    break;\n                case /* optional uint64 from_block */ 6:\n                    message.fromBlock = reader.uint64().toBigInt();\n                    break;\n                case /* optional uint64 to_block */ 7:\n                    message.toBlock = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TransactionFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated bytes transaction_hashes = 1; */\n        for (let i = 0; i < message.transactionHashes.length; i++)\n            writer.tag(1, WireType.LengthDelimited).bytes(message.transactionHashes[i]);\n        /* repeated bytes caller_addresses = 2; */\n        for (let i = 0; i < message.callerAddresses.length; i++)\n            writer.tag(2, WireType.LengthDelimited).bytes(message.callerAddresses[i]);\n        /* repeated bytes contract_addresses = 3; */\n        for (let i = 0; i < message.contractAddresses.length; i++)\n            writer.tag(3, WireType.LengthDelimited).bytes(message.contractAddresses[i]);\n        /* repeated string entrypoints = 4; */\n        for (let i = 0; i < message.entrypoints.length; i++)\n            writer.tag(4, WireType.LengthDelimited).string(message.entrypoints[i]);\n        /* repeated bytes model_selectors = 5; */\n        for (let i = 0; i < message.modelSelectors.length; i++)\n            writer.tag(5, WireType.LengthDelimited).bytes(message.modelSelectors[i]);\n        /* optional uint64 from_block = 6; */\n        if (message.fromBlock !== undefined)\n            writer.tag(6, WireType.Varint).uint64(message.fromBlock);\n        /* optional uint64 to_block = 7; */\n        if (message.toBlock !== undefined)\n            writer.tag(7, WireType.Varint).uint64(message.toBlock);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TransactionFilter\n */\nexport const TransactionFilter = new TransactionFilter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionQuery$Type extends MessageType<TransactionQuery> {\n    constructor() {\n        super(\"types.TransactionQuery\", [\n            { no: 1, name: \"filter\", kind: \"message\", T: () => TransactionFilter },\n            { no: 2, name: \"pagination\", kind: \"message\", T: () => Pagination }\n        ]);\n    }\n    create(value?: PartialMessage<TransactionQuery>): TransactionQuery {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<TransactionQuery>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionQuery): TransactionQuery {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.TransactionFilter filter */ 1:\n                    message.filter = TransactionFilter.internalBinaryRead(reader, reader.uint32(), options, message.filter);\n                    break;\n                case /* types.Pagination pagination */ 2:\n                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TransactionQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.TransactionFilter filter = 1; */\n        if (message.filter)\n            TransactionFilter.internalBinaryWrite(message.filter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* types.Pagination pagination = 2; */\n        if (message.pagination)\n            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.TransactionQuery\n */\nexport const TransactionQuery = new TransactionQuery$Type();\n","// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic\n// @generated from protobuf file \"schema.proto\" (package \"types\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message types.EnumOption\n */\nexport interface EnumOption {\n    /**\n     * @generated from protobuf field: string name = 1\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: types.Ty ty = 2\n     */\n    ty?: Ty;\n}\n/**\n * @generated from protobuf message types.Enum\n */\nexport interface Enum {\n    /**\n     * @generated from protobuf field: string name = 1\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: uint32 option = 2\n     */\n    option: number;\n    /**\n     * @generated from protobuf field: repeated types.EnumOption options = 3\n     */\n    options: EnumOption[];\n}\n/**\n * @generated from protobuf message types.Primitive\n */\nexport interface Primitive {\n    /**\n     * @generated from protobuf oneof: primitive_type\n     */\n    primitiveType: {\n        oneofKind: \"i8\";\n        /**\n         * @generated from protobuf field: int32 i8 = 1\n         */\n        i8: number;\n    } | {\n        oneofKind: \"i16\";\n        /**\n         * @generated from protobuf field: int32 i16 = 2\n         */\n        i16: number;\n    } | {\n        oneofKind: \"i32\";\n        /**\n         * @generated from protobuf field: int32 i32 = 3\n         */\n        i32: number;\n    } | {\n        oneofKind: \"i64\";\n        /**\n         * @generated from protobuf field: int64 i64 = 4\n         */\n        i64: bigint;\n    } | {\n        oneofKind: \"i128\";\n        /**\n         * @generated from protobuf field: bytes i128 = 5\n         */\n        i128: Uint8Array;\n    } | {\n        oneofKind: \"u8\";\n        /**\n         * @generated from protobuf field: uint32 u8 = 6\n         */\n        u8: number;\n    } | {\n        oneofKind: \"u16\";\n        /**\n         * @generated from protobuf field: uint32 u16 = 7\n         */\n        u16: number;\n    } | {\n        oneofKind: \"u32\";\n        /**\n         * @generated from protobuf field: uint32 u32 = 8\n         */\n        u32: number;\n    } | {\n        oneofKind: \"u64\";\n        /**\n         * @generated from protobuf field: uint64 u64 = 9\n         */\n        u64: bigint;\n    } | {\n        oneofKind: \"u128\";\n        /**\n         * @generated from protobuf field: bytes u128 = 10\n         */\n        u128: Uint8Array;\n    } | {\n        oneofKind: \"u256\";\n        /**\n         * @generated from protobuf field: bytes u256 = 11\n         */\n        u256: Uint8Array;\n    } | {\n        oneofKind: \"bool\";\n        /**\n         * @generated from protobuf field: bool bool = 12\n         */\n        bool: boolean;\n    } | {\n        oneofKind: \"felt252\";\n        /**\n         * @generated from protobuf field: bytes felt252 = 13\n         */\n        felt252: Uint8Array;\n    } | {\n        oneofKind: \"classHash\";\n        /**\n         * @generated from protobuf field: bytes class_hash = 14\n         */\n        classHash: Uint8Array;\n    } | {\n        oneofKind: \"contractAddress\";\n        /**\n         * @generated from protobuf field: bytes contract_address = 15\n         */\n        contractAddress: Uint8Array;\n    } | {\n        oneofKind: \"ethAddress\";\n        /**\n         * @generated from protobuf field: bytes eth_address = 16\n         */\n        ethAddress: Uint8Array;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message types.Struct\n */\nexport interface Struct {\n    /**\n     * @generated from protobuf field: string name = 1\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated types.Member children = 2\n     */\n    children: Member[];\n}\n/**\n * @generated from protobuf message types.Array\n */\nexport interface Array$ {\n    /**\n     * @generated from protobuf field: repeated types.Ty children = 1\n     */\n    children: Ty[];\n}\n/**\n * @generated from protobuf message types.Ty\n */\nexport interface Ty {\n    /**\n     * @generated from protobuf oneof: ty_type\n     */\n    tyType: {\n        oneofKind: \"primitive\";\n        /**\n         * @generated from protobuf field: types.Primitive primitive = 2\n         */\n        primitive: Primitive;\n    } | {\n        oneofKind: \"enum\";\n        /**\n         * @generated from protobuf field: types.Enum enum = 3\n         */\n        enum: Enum;\n    } | {\n        oneofKind: \"struct\";\n        /**\n         * @generated from protobuf field: types.Struct struct = 4\n         */\n        struct: Struct;\n    } | {\n        oneofKind: \"tuple\";\n        /**\n         * @generated from protobuf field: types.Array tuple = 5\n         */\n        tuple: Array$;\n    } | {\n        oneofKind: \"array\";\n        /**\n         * @generated from protobuf field: types.Array array = 6\n         */\n        array: Array$;\n    } | {\n        oneofKind: \"bytearray\";\n        /**\n         * @generated from protobuf field: string bytearray = 7\n         */\n        bytearray: string;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message types.Member\n */\nexport interface Member {\n    /**\n     * @generated from protobuf field: string name = 1\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: types.Ty ty = 2\n     */\n    ty?: Ty;\n    /**\n     * @generated from protobuf field: bool key = 3\n     */\n    key: boolean;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnumOption$Type extends MessageType<EnumOption> {\n    constructor() {\n        super(\"types.EnumOption\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"ty\", kind: \"message\", T: () => Ty }\n        ]);\n    }\n    create(value?: PartialMessage<EnumOption>): EnumOption {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.name = \"\";\n        if (value !== undefined)\n            reflectionMergePartial<EnumOption>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumOption): EnumOption {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* types.Ty ty */ 2:\n                    message.ty = Ty.internalBinaryRead(reader, reader.uint32(), options, message.ty);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnumOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* types.Ty ty = 2; */\n        if (message.ty)\n            Ty.internalBinaryWrite(message.ty, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.EnumOption\n */\nexport const EnumOption = new EnumOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Enum$Type extends MessageType<Enum> {\n    constructor() {\n        super(\"types.Enum\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"option\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 3, name: \"options\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EnumOption }\n        ]);\n    }\n    create(value?: PartialMessage<Enum>): Enum {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.name = \"\";\n        message.option = 0;\n        message.options = [];\n        if (value !== undefined)\n            reflectionMergePartial<Enum>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Enum): Enum {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* uint32 option */ 2:\n                    message.option = reader.uint32();\n                    break;\n                case /* repeated types.EnumOption options */ 3:\n                    message.options.push(EnumOption.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Enum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* uint32 option = 2; */\n        if (message.option !== 0)\n            writer.tag(2, WireType.Varint).uint32(message.option);\n        /* repeated types.EnumOption options = 3; */\n        for (let i = 0; i < message.options.length; i++)\n            EnumOption.internalBinaryWrite(message.options[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Enum\n */\nexport const Enum = new Enum$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Primitive$Type extends MessageType<Primitive> {\n    constructor() {\n        super(\"types.Primitive\", [\n            { no: 1, name: \"i8\", kind: \"scalar\", oneof: \"primitiveType\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"i16\", kind: \"scalar\", oneof: \"primitiveType\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"i32\", kind: \"scalar\", oneof: \"primitiveType\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"i64\", kind: \"scalar\", oneof: \"primitiveType\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"i128\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 6, name: \"u8\", kind: \"scalar\", oneof: \"primitiveType\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 7, name: \"u16\", kind: \"scalar\", oneof: \"primitiveType\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 8, name: \"u32\", kind: \"scalar\", oneof: \"primitiveType\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 9, name: \"u64\", kind: \"scalar\", oneof: \"primitiveType\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 10, name: \"u128\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 11, name: \"u256\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 12, name: \"bool\", kind: \"scalar\", oneof: \"primitiveType\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"felt252\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 14, name: \"class_hash\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 15, name: \"contract_address\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 16, name: \"eth_address\", kind: \"scalar\", oneof: \"primitiveType\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Primitive>): Primitive {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.primitiveType = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<Primitive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Primitive): Primitive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 i8 */ 1:\n                    message.primitiveType = {\n                        oneofKind: \"i8\",\n                        i8: reader.int32()\n                    };\n                    break;\n                case /* int32 i16 */ 2:\n                    message.primitiveType = {\n                        oneofKind: \"i16\",\n                        i16: reader.int32()\n                    };\n                    break;\n                case /* int32 i32 */ 3:\n                    message.primitiveType = {\n                        oneofKind: \"i32\",\n                        i32: reader.int32()\n                    };\n                    break;\n                case /* int64 i64 */ 4:\n                    message.primitiveType = {\n                        oneofKind: \"i64\",\n                        i64: reader.int64().toBigInt()\n                    };\n                    break;\n                case /* bytes i128 */ 5:\n                    message.primitiveType = {\n                        oneofKind: \"i128\",\n                        i128: reader.bytes()\n                    };\n                    break;\n                case /* uint32 u8 */ 6:\n                    message.primitiveType = {\n                        oneofKind: \"u8\",\n                        u8: reader.uint32()\n                    };\n                    break;\n                case /* uint32 u16 */ 7:\n                    message.primitiveType = {\n                        oneofKind: \"u16\",\n                        u16: reader.uint32()\n                    };\n                    break;\n                case /* uint32 u32 */ 8:\n                    message.primitiveType = {\n                        oneofKind: \"u32\",\n                        u32: reader.uint32()\n                    };\n                    break;\n                case /* uint64 u64 */ 9:\n                    message.primitiveType = {\n                        oneofKind: \"u64\",\n                        u64: reader.uint64().toBigInt()\n                    };\n                    break;\n                case /* bytes u128 */ 10:\n                    message.primitiveType = {\n                        oneofKind: \"u128\",\n                        u128: reader.bytes()\n                    };\n                    break;\n                case /* bytes u256 */ 11:\n                    message.primitiveType = {\n                        oneofKind: \"u256\",\n                        u256: reader.bytes()\n                    };\n                    break;\n                case /* bool bool */ 12:\n                    message.primitiveType = {\n                        oneofKind: \"bool\",\n                        bool: reader.bool()\n                    };\n                    break;\n                case /* bytes felt252 */ 13:\n                    message.primitiveType = {\n                        oneofKind: \"felt252\",\n                        felt252: reader.bytes()\n                    };\n                    break;\n                case /* bytes class_hash */ 14:\n                    message.primitiveType = {\n                        oneofKind: \"classHash\",\n                        classHash: reader.bytes()\n                    };\n                    break;\n                case /* bytes contract_address */ 15:\n                    message.primitiveType = {\n                        oneofKind: \"contractAddress\",\n                        contractAddress: reader.bytes()\n                    };\n                    break;\n                case /* bytes eth_address */ 16:\n                    message.primitiveType = {\n                        oneofKind: \"ethAddress\",\n                        ethAddress: reader.bytes()\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Primitive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 i8 = 1; */\n        if (message.primitiveType.oneofKind === \"i8\")\n            writer.tag(1, WireType.Varint).int32(message.primitiveType.i8);\n        /* int32 i16 = 2; */\n        if (message.primitiveType.oneofKind === \"i16\")\n            writer.tag(2, WireType.Varint).int32(message.primitiveType.i16);\n        /* int32 i32 = 3; */\n        if (message.primitiveType.oneofKind === \"i32\")\n            writer.tag(3, WireType.Varint).int32(message.primitiveType.i32);\n        /* int64 i64 = 4; */\n        if (message.primitiveType.oneofKind === \"i64\")\n            writer.tag(4, WireType.Varint).int64(message.primitiveType.i64);\n        /* bytes i128 = 5; */\n        if (message.primitiveType.oneofKind === \"i128\")\n            writer.tag(5, WireType.LengthDelimited).bytes(message.primitiveType.i128);\n        /* uint32 u8 = 6; */\n        if (message.primitiveType.oneofKind === \"u8\")\n            writer.tag(6, WireType.Varint).uint32(message.primitiveType.u8);\n        /* uint32 u16 = 7; */\n        if (message.primitiveType.oneofKind === \"u16\")\n            writer.tag(7, WireType.Varint).uint32(message.primitiveType.u16);\n        /* uint32 u32 = 8; */\n        if (message.primitiveType.oneofKind === \"u32\")\n            writer.tag(8, WireType.Varint).uint32(message.primitiveType.u32);\n        /* uint64 u64 = 9; */\n        if (message.primitiveType.oneofKind === \"u64\")\n            writer.tag(9, WireType.Varint).uint64(message.primitiveType.u64);\n        /* bytes u128 = 10; */\n        if (message.primitiveType.oneofKind === \"u128\")\n            writer.tag(10, WireType.LengthDelimited).bytes(message.primitiveType.u128);\n        /* bytes u256 = 11; */\n        if (message.primitiveType.oneofKind === \"u256\")\n            writer.tag(11, WireType.LengthDelimited).bytes(message.primitiveType.u256);\n        /* bool bool = 12; */\n        if (message.primitiveType.oneofKind === \"bool\")\n            writer.tag(12, WireType.Varint).bool(message.primitiveType.bool);\n        /* bytes felt252 = 13; */\n        if (message.primitiveType.oneofKind === \"felt252\")\n            writer.tag(13, WireType.LengthDelimited).bytes(message.primitiveType.felt252);\n        /* bytes class_hash = 14; */\n        if (message.primitiveType.oneofKind === \"classHash\")\n            writer.tag(14, WireType.LengthDelimited).bytes(message.primitiveType.classHash);\n        /* bytes contract_address = 15; */\n        if (message.primitiveType.oneofKind === \"contractAddress\")\n            writer.tag(15, WireType.LengthDelimited).bytes(message.primitiveType.contractAddress);\n        /* bytes eth_address = 16; */\n        if (message.primitiveType.oneofKind === \"ethAddress\")\n            writer.tag(16, WireType.LengthDelimited).bytes(message.primitiveType.ethAddress);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Primitive\n */\nexport const Primitive = new Primitive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends MessageType<Struct> {\n    constructor() {\n        super(\"types.Struct\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"children\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Member }\n        ]);\n    }\n    create(value?: PartialMessage<Struct>): Struct {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.name = \"\";\n        message.children = [];\n        if (value !== undefined)\n            reflectionMergePartial<Struct>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Struct): Struct {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* repeated types.Member children */ 2:\n                    message.children.push(Member.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Struct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* repeated types.Member children = 2; */\n        for (let i = 0; i < message.children.length; i++)\n            Member.internalBinaryWrite(message.children[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Struct\n */\nexport const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Array$$Type extends MessageType<Array$> {\n    constructor() {\n        super(\"types.Array\", [\n            { no: 1, name: \"children\", kind: \"message\", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Ty }\n        ]);\n    }\n    create(value?: PartialMessage<Array$>): Array$ {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.children = [];\n        if (value !== undefined)\n            reflectionMergePartial<Array$>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Array$): Array$ {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated types.Ty children */ 1:\n                    message.children.push(Ty.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Array$, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated types.Ty children = 1; */\n        for (let i = 0; i < message.children.length; i++)\n            Ty.internalBinaryWrite(message.children[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Array\n */\nexport const Array$ = new Array$$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Ty$Type extends MessageType<Ty> {\n    constructor() {\n        super(\"types.Ty\", [\n            { no: 2, name: \"primitive\", kind: \"message\", oneof: \"tyType\", T: () => Primitive },\n            { no: 3, name: \"enum\", kind: \"message\", oneof: \"tyType\", T: () => Enum },\n            { no: 4, name: \"struct\", kind: \"message\", oneof: \"tyType\", T: () => Struct },\n            { no: 5, name: \"tuple\", kind: \"message\", oneof: \"tyType\", T: () => Array$ },\n            { no: 6, name: \"array\", kind: \"message\", oneof: \"tyType\", T: () => Array$ },\n            { no: 7, name: \"bytearray\", kind: \"scalar\", oneof: \"tyType\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Ty>): Ty {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.tyType = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<Ty>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ty): Ty {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* types.Primitive primitive */ 2:\n                    message.tyType = {\n                        oneofKind: \"primitive\",\n                        primitive: Primitive.internalBinaryRead(reader, reader.uint32(), options, (message.tyType as any).primitive)\n                    };\n                    break;\n                case /* types.Enum enum */ 3:\n                    message.tyType = {\n                        oneofKind: \"enum\",\n                        enum: Enum.internalBinaryRead(reader, reader.uint32(), options, (message.tyType as any).enum)\n                    };\n                    break;\n                case /* types.Struct struct */ 4:\n                    message.tyType = {\n                        oneofKind: \"struct\",\n                        struct: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.tyType as any).struct)\n                    };\n                    break;\n                case /* types.Array tuple */ 5:\n                    message.tyType = {\n                        oneofKind: \"tuple\",\n                        tuple: Array$.internalBinaryRead(reader, reader.uint32(), options, (message.tyType as any).tuple)\n                    };\n                    break;\n                case /* types.Array array */ 6:\n                    message.tyType = {\n                        oneofKind: \"array\",\n                        array: Array$.internalBinaryRead(reader, reader.uint32(), options, (message.tyType as any).array)\n                    };\n                    break;\n                case /* string bytearray */ 7:\n                    message.tyType = {\n                        oneofKind: \"bytearray\",\n                        bytearray: reader.string()\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Ty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* types.Primitive primitive = 2; */\n        if (message.tyType.oneofKind === \"primitive\")\n            Primitive.internalBinaryWrite(message.tyType.primitive, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* types.Enum enum = 3; */\n        if (message.tyType.oneofKind === \"enum\")\n            Enum.internalBinaryWrite(message.tyType.enum, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* types.Struct struct = 4; */\n        if (message.tyType.oneofKind === \"struct\")\n            Struct.internalBinaryWrite(message.tyType.struct, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* types.Array tuple = 5; */\n        if (message.tyType.oneofKind === \"tuple\")\n            Array$.internalBinaryWrite(message.tyType.tuple, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* types.Array array = 6; */\n        if (message.tyType.oneofKind === \"array\")\n            Array$.internalBinaryWrite(message.tyType.array, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* string bytearray = 7; */\n        if (message.tyType.oneofKind === \"bytearray\")\n            writer.tag(7, WireType.LengthDelimited).string(message.tyType.bytearray);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Ty\n */\nexport const Ty = new Ty$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Member$Type extends MessageType<Member> {\n    constructor() {\n        super(\"types.Member\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"ty\", kind: \"message\", T: () => Ty },\n            { no: 3, name: \"key\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Member>): Member {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.name = \"\";\n        message.key = false;\n        if (value !== undefined)\n            reflectionMergePartial<Member>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Member): Member {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* types.Ty ty */ 2:\n                    message.ty = Ty.internalBinaryRead(reader, reader.uint32(), options, message.ty);\n                    break;\n                case /* bool key */ 3:\n                    message.key = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Member, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* types.Ty ty = 2; */\n        if (message.ty)\n            Ty.internalBinaryWrite(message.ty, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* bool key = 3; */\n        if (message.key !== false)\n            writer.tag(3, WireType.Varint).bool(message.key);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message types.Member\n */\nexport const Member = new Member$Type();\n","// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic\n// @generated from protobuf file \"world.proto\" (package \"world\", syntax proto3)\n// tslint:disable\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { World } from \"./world\";\nimport type { PublishMessageBatchResponse } from \"./world\";\nimport type { PublishMessageBatchRequest } from \"./world\";\nimport type { PublishMessageResponse } from \"./world\";\nimport type { PublishMessageRequest } from \"./world\";\nimport type { RetrieveTokenCollectionsResponse } from \"./world\";\nimport type { RetrieveTokenCollectionsRequest } from \"./world\";\nimport type { RetrieveControllersResponse } from \"./world\";\nimport type { RetrieveControllersRequest } from \"./world\";\nimport type { SubscribeTransactionsResponse } from \"./world\";\nimport type { SubscribeTransactionsRequest } from \"./world\";\nimport type { RetrieveTransactionsResponse } from \"./world\";\nimport type { RetrieveTransactionsRequest } from \"./world\";\nimport type { RetrieveTokenBalancesResponse } from \"./world\";\nimport type { RetrieveTokenBalancesRequest } from \"./world\";\nimport type { RetrieveTokensResponse } from \"./world\";\nimport type { RetrieveTokensRequest } from \"./world\";\nimport type { SubscribeEventsResponse } from \"./world\";\nimport type { SubscribeEventsRequest } from \"./world\";\nimport type { RetrieveEventsResponse } from \"./world\";\nimport type { RetrieveEventsRequest } from \"./world\";\nimport type { RetrieveEventMessagesRequest } from \"./world\";\nimport type { UpdateTokenSubscriptionRequest } from \"./world\";\nimport type { SubscribeTokensResponse } from \"./world\";\nimport type { SubscribeTokensRequest } from \"./world\";\nimport type { UpdateTokenBalancesSubscriptionRequest } from \"./world\";\nimport type { SubscribeTokenBalancesResponse } from \"./world\";\nimport type { SubscribeTokenBalancesRequest } from \"./world\";\nimport type { UpdateEventMessagesSubscriptionRequest } from \"./world\";\nimport type { SubscribeEventMessagesRequest } from \"./world\";\nimport type { RetrieveEntitiesResponse } from \"./world\";\nimport type { RetrieveEntitiesRequest } from \"./world\";\nimport type { Empty } from \"./google/protobuf/empty\";\nimport type { UpdateEntitiesSubscriptionRequest } from \"./world\";\nimport type { SubscribeEntityResponse } from \"./world\";\nimport type { SubscribeEntitiesRequest } from \"./world\";\nimport type { WorldMetadataResponse } from \"./world\";\nimport type { WorldMetadataRequest } from \"./world\";\nimport type { UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { SubscribeIndexerResponse } from \"./world\";\nimport type { SubscribeIndexerRequest } from \"./world\";\nimport type { ServerStreamingCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * The World service provides information about the world.\n *\n * @generated from protobuf service world.World\n */\nexport interface IWorldClient {\n    /**\n     * Subscribes to updates about the indexer. Like the head block number, tps, etc.\n     *\n     * @generated from protobuf rpc: SubscribeIndexer\n     */\n    subscribeIndexer(input: SubscribeIndexerRequest, options?: RpcOptions): ServerStreamingCall<SubscribeIndexerRequest, SubscribeIndexerResponse>;\n    /**\n     * Retrieves metadata about the World including all the registered components and systems.\n     *\n     * @generated from protobuf rpc: WorldMetadata\n     */\n    worldMetadata(input: WorldMetadataRequest, options?: RpcOptions): UnaryCall<WorldMetadataRequest, WorldMetadataResponse>;\n    /**\n     * Subscribe to entity updates.\n     *\n     * @generated from protobuf rpc: SubscribeEntities\n     */\n    subscribeEntities(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse>;\n    /**\n     * Update entity subscription\n     *\n     * @generated from protobuf rpc: UpdateEntitiesSubscription\n     */\n    updateEntitiesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty>;\n    /**\n     * Retrieve entities\n     *\n     * @generated from protobuf rpc: RetrieveEntities\n     */\n    retrieveEntities(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse>;\n    /**\n     * Subscribe to entity updates.\n     *\n     * @generated from protobuf rpc: SubscribeEventMessages\n     */\n    subscribeEventMessages(input: SubscribeEventMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventMessagesRequest, SubscribeEntityResponse>;\n    /**\n     * Update entity subscription\n     *\n     * @generated from protobuf rpc: UpdateEventMessagesSubscription\n     */\n    updateEventMessagesSubscription(input: UpdateEventMessagesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEventMessagesSubscriptionRequest, Empty>;\n    /**\n     * Subscribe to token balance updates.\n     *\n     * @generated from protobuf rpc: SubscribeTokenBalances\n     */\n    subscribeTokenBalances(input: SubscribeTokenBalancesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse>;\n    /**\n     * Update token balance subscription\n     *\n     * @generated from protobuf rpc: UpdateTokenBalancesSubscription\n     */\n    updateTokenBalancesSubscription(input: UpdateTokenBalancesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty>;\n    /**\n     * Subscribe to token updates.\n     *\n     * @generated from protobuf rpc: SubscribeTokens\n     */\n    subscribeTokens(input: SubscribeTokensRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse>;\n    /**\n     * Update token subscription\n     *\n     * @generated from protobuf rpc: UpdateTokensSubscription\n     */\n    updateTokensSubscription(input: UpdateTokenSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenSubscriptionRequest, Empty>;\n    /**\n     * Retrieve entities\n     *\n     * @generated from protobuf rpc: RetrieveEventMessages\n     */\n    retrieveEventMessages(input: RetrieveEventMessagesRequest, options?: RpcOptions): UnaryCall<RetrieveEventMessagesRequest, RetrieveEntitiesResponse>;\n    /**\n     * Retrieve events\n     *\n     * @generated from protobuf rpc: RetrieveEvents\n     */\n    retrieveEvents(input: RetrieveEventsRequest, options?: RpcOptions): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse>;\n    /**\n     * Subscribe to events\n     *\n     * @generated from protobuf rpc: SubscribeEvents\n     */\n    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse>;\n    /**\n     * Retrieve tokens\n     *\n     * @generated from protobuf rpc: RetrieveTokens\n     */\n    retrieveTokens(input: RetrieveTokensRequest, options?: RpcOptions): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse>;\n    /**\n     * Retrieve token balances\n     *\n     * @generated from protobuf rpc: RetrieveTokenBalances\n     */\n    retrieveTokenBalances(input: RetrieveTokenBalancesRequest, options?: RpcOptions): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse>;\n    /**\n     * Retrieve transactions\n     *\n     * @generated from protobuf rpc: RetrieveTransactions\n     */\n    retrieveTransactions(input: RetrieveTransactionsRequest, options?: RpcOptions): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse>;\n    /**\n     * Subscribe to transactions\n     *\n     * @generated from protobuf rpc: SubscribeTransactions\n     */\n    subscribeTransactions(input: SubscribeTransactionsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionsRequest, SubscribeTransactionsResponse>;\n    /**\n     * Retrieve controllers\n     *\n     * @generated from protobuf rpc: RetrieveControllers\n     */\n    retrieveControllers(input: RetrieveControllersRequest, options?: RpcOptions): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse>;\n    /**\n     * Retrieve tokens collections\n     *\n     * @generated from protobuf rpc: RetrieveTokenCollections\n     */\n    retrieveTokenCollections(input: RetrieveTokenCollectionsRequest, options?: RpcOptions): UnaryCall<RetrieveTokenCollectionsRequest, RetrieveTokenCollectionsResponse>;\n    /**\n     * Publish a torii offchain message\n     *\n     * @generated from protobuf rpc: PublishMessage\n     */\n    publishMessage(input: PublishMessageRequest, options?: RpcOptions): UnaryCall<PublishMessageRequest, PublishMessageResponse>;\n    /**\n     * Publish a set of torii offchain messages\n     *\n     * @generated from protobuf rpc: PublishMessageBatch\n     */\n    publishMessageBatch(input: PublishMessageBatchRequest, options?: RpcOptions): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse>;\n}\n/**\n * The World service provides information about the world.\n *\n * @generated from protobuf service world.World\n */\nexport class WorldClient implements IWorldClient, ServiceInfo {\n    typeName = World.typeName;\n    methods = World.methods;\n    options = World.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Subscribes to updates about the indexer. Like the head block number, tps, etc.\n     *\n     * @generated from protobuf rpc: SubscribeIndexer\n     */\n    subscribeIndexer(input: SubscribeIndexerRequest, options?: RpcOptions): ServerStreamingCall<SubscribeIndexerRequest, SubscribeIndexerResponse> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeIndexerRequest, SubscribeIndexerResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieves metadata about the World including all the registered components and systems.\n     *\n     * @generated from protobuf rpc: WorldMetadata\n     */\n    worldMetadata(input: WorldMetadataRequest, options?: RpcOptions): UnaryCall<WorldMetadataRequest, WorldMetadataResponse> {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return stackIntercept<WorldMetadataRequest, WorldMetadataResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to entity updates.\n     *\n     * @generated from protobuf rpc: SubscribeEntities\n     */\n    subscribeEntities(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse> {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeEntitiesRequest, SubscribeEntityResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Update entity subscription\n     *\n     * @generated from protobuf rpc: UpdateEntitiesSubscription\n     */\n    updateEntitiesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty> {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return stackIntercept<UpdateEntitiesSubscriptionRequest, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve entities\n     *\n     * @generated from protobuf rpc: RetrieveEntities\n     */\n    retrieveEntities(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse> {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveEntitiesRequest, RetrieveEntitiesResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to entity updates.\n     *\n     * @generated from protobuf rpc: SubscribeEventMessages\n     */\n    subscribeEventMessages(input: SubscribeEventMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventMessagesRequest, SubscribeEntityResponse> {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeEventMessagesRequest, SubscribeEntityResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Update entity subscription\n     *\n     * @generated from protobuf rpc: UpdateEventMessagesSubscription\n     */\n    updateEventMessagesSubscription(input: UpdateEventMessagesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEventMessagesSubscriptionRequest, Empty> {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return stackIntercept<UpdateEventMessagesSubscriptionRequest, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to token balance updates.\n     *\n     * @generated from protobuf rpc: SubscribeTokenBalances\n     */\n    subscribeTokenBalances(input: SubscribeTokenBalancesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse> {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Update token balance subscription\n     *\n     * @generated from protobuf rpc: UpdateTokenBalancesSubscription\n     */\n    updateTokenBalancesSubscription(input: UpdateTokenBalancesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty> {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return stackIntercept<UpdateTokenBalancesSubscriptionRequest, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to token updates.\n     *\n     * @generated from protobuf rpc: SubscribeTokens\n     */\n    subscribeTokens(input: SubscribeTokensRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse> {\n        const method = this.methods[9], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeTokensRequest, SubscribeTokensResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Update token subscription\n     *\n     * @generated from protobuf rpc: UpdateTokensSubscription\n     */\n    updateTokensSubscription(input: UpdateTokenSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenSubscriptionRequest, Empty> {\n        const method = this.methods[10], opt = this._transport.mergeOptions(options);\n        return stackIntercept<UpdateTokenSubscriptionRequest, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve entities\n     *\n     * @generated from protobuf rpc: RetrieveEventMessages\n     */\n    retrieveEventMessages(input: RetrieveEventMessagesRequest, options?: RpcOptions): UnaryCall<RetrieveEventMessagesRequest, RetrieveEntitiesResponse> {\n        const method = this.methods[11], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveEventMessagesRequest, RetrieveEntitiesResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve events\n     *\n     * @generated from protobuf rpc: RetrieveEvents\n     */\n    retrieveEvents(input: RetrieveEventsRequest, options?: RpcOptions): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse> {\n        const method = this.methods[12], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveEventsRequest, RetrieveEventsResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to events\n     *\n     * @generated from protobuf rpc: SubscribeEvents\n     */\n    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse> {\n        const method = this.methods[13], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeEventsRequest, SubscribeEventsResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve tokens\n     *\n     * @generated from protobuf rpc: RetrieveTokens\n     */\n    retrieveTokens(input: RetrieveTokensRequest, options?: RpcOptions): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse> {\n        const method = this.methods[14], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveTokensRequest, RetrieveTokensResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve token balances\n     *\n     * @generated from protobuf rpc: RetrieveTokenBalances\n     */\n    retrieveTokenBalances(input: RetrieveTokenBalancesRequest, options?: RpcOptions): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse> {\n        const method = this.methods[15], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve transactions\n     *\n     * @generated from protobuf rpc: RetrieveTransactions\n     */\n    retrieveTransactions(input: RetrieveTransactionsRequest, options?: RpcOptions): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse> {\n        const method = this.methods[16], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveTransactionsRequest, RetrieveTransactionsResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Subscribe to transactions\n     *\n     * @generated from protobuf rpc: SubscribeTransactions\n     */\n    subscribeTransactions(input: SubscribeTransactionsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionsRequest, SubscribeTransactionsResponse> {\n        const method = this.methods[17], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeTransactionsRequest, SubscribeTransactionsResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve controllers\n     *\n     * @generated from protobuf rpc: RetrieveControllers\n     */\n    retrieveControllers(input: RetrieveControllersRequest, options?: RpcOptions): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse> {\n        const method = this.methods[18], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveControllersRequest, RetrieveControllersResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve tokens collections\n     *\n     * @generated from protobuf rpc: RetrieveTokenCollections\n     */\n    retrieveTokenCollections(input: RetrieveTokenCollectionsRequest, options?: RpcOptions): UnaryCall<RetrieveTokenCollectionsRequest, RetrieveTokenCollectionsResponse> {\n        const method = this.methods[19], opt = this._transport.mergeOptions(options);\n        return stackIntercept<RetrieveTokenCollectionsRequest, RetrieveTokenCollectionsResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Publish a torii offchain message\n     *\n     * @generated from protobuf rpc: PublishMessage\n     */\n    publishMessage(input: PublishMessageRequest, options?: RpcOptions): UnaryCall<PublishMessageRequest, PublishMessageResponse> {\n        const method = this.methods[20], opt = this._transport.mergeOptions(options);\n        return stackIntercept<PublishMessageRequest, PublishMessageResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Publish a set of torii offchain messages\n     *\n     * @generated from protobuf rpc: PublishMessageBatch\n     */\n    publishMessageBatch(input: PublishMessageBatchRequest, options?: RpcOptions): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse> {\n        const method = this.methods[21], opt = this._transport.mergeOptions(options);\n        return stackIntercept<PublishMessageBatchRequest, PublishMessageBatchResponse>(\"unary\", this._transport, method, opt, input);\n    }\n}\n"],"mappings":"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","names":["WireType","UnknownFieldHandler","reflectionMergePartial","MessageType","WireType","UnknownFieldHandler","reflectionMergePartial","MessageType","UnknownFieldHandler","reflectionMergePartial","MessageType","PatternMatching","LogicalOperator","ComparisonOperator","OrderDirection","PaginationDirection","CallType","MessageType","reflectionMergePartial","UnknownFieldHandler","WireType","MessageType","reflectionMergePartial","UnknownFieldHandler","WireType","World","World"]}