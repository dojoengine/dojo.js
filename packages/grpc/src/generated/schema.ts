// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic
// @generated from protobuf file "schema.proto" (package "types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message types.EnumOption
 */
export interface EnumOption {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: types.Ty ty = 2
     */
    ty?: Ty;
}
/**
 * @generated from protobuf message types.Enum
 */
export interface Enum {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 option = 2
     */
    option: number;
    /**
     * @generated from protobuf field: repeated types.EnumOption options = 3
     */
    options: EnumOption[];
}
/**
 * @generated from protobuf message types.Primitive
 */
export interface Primitive {
    /**
     * @generated from protobuf oneof: primitive_type
     */
    primitiveType:
        | {
              oneofKind: "i8";
              /**
               * @generated from protobuf field: int32 i8 = 1
               */
              i8: number;
          }
        | {
              oneofKind: "i16";
              /**
               * @generated from protobuf field: int32 i16 = 2
               */
              i16: number;
          }
        | {
              oneofKind: "i32";
              /**
               * @generated from protobuf field: int32 i32 = 3
               */
              i32: number;
          }
        | {
              oneofKind: "i64";
              /**
               * @generated from protobuf field: int64 i64 = 4
               */
              i64: bigint;
          }
        | {
              oneofKind: "i128";
              /**
               * @generated from protobuf field: bytes i128 = 5
               */
              i128: Uint8Array;
          }
        | {
              oneofKind: "u8";
              /**
               * @generated from protobuf field: uint32 u8 = 6
               */
              u8: number;
          }
        | {
              oneofKind: "u16";
              /**
               * @generated from protobuf field: uint32 u16 = 7
               */
              u16: number;
          }
        | {
              oneofKind: "u32";
              /**
               * @generated from protobuf field: uint32 u32 = 8
               */
              u32: number;
          }
        | {
              oneofKind: "u64";
              /**
               * @generated from protobuf field: uint64 u64 = 9
               */
              u64: bigint;
          }
        | {
              oneofKind: "u128";
              /**
               * @generated from protobuf field: bytes u128 = 10
               */
              u128: Uint8Array;
          }
        | {
              oneofKind: "u256";
              /**
               * @generated from protobuf field: bytes u256 = 11
               */
              u256: Uint8Array;
          }
        | {
              oneofKind: "bool";
              /**
               * @generated from protobuf field: bool bool = 12
               */
              bool: boolean;
          }
        | {
              oneofKind: "felt252";
              /**
               * @generated from protobuf field: bytes felt252 = 13
               */
              felt252: Uint8Array;
          }
        | {
              oneofKind: "classHash";
              /**
               * @generated from protobuf field: bytes class_hash = 14
               */
              classHash: Uint8Array;
          }
        | {
              oneofKind: "contractAddress";
              /**
               * @generated from protobuf field: bytes contract_address = 15
               */
              contractAddress: Uint8Array;
          }
        | {
              oneofKind: "ethAddress";
              /**
               * @generated from protobuf field: bytes eth_address = 16
               */
              ethAddress: Uint8Array;
          }
        | {
              oneofKind: undefined;
          };
}
/**
 * @generated from protobuf message types.Struct
 */
export interface Struct {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: repeated types.Member children = 2
     */
    children: Member[];
}
/**
 * @generated from protobuf message types.Array
 */
export interface Array$ {
    /**
     * @generated from protobuf field: repeated types.Ty children = 1
     */
    children: Ty[];
}
/**
 * @generated from protobuf message types.Ty
 */
export interface Ty {
    /**
     * @generated from protobuf oneof: ty_type
     */
    tyType:
        | {
              oneofKind: "primitive";
              /**
               * @generated from protobuf field: types.Primitive primitive = 2
               */
              primitive: Primitive;
          }
        | {
              oneofKind: "enum";
              /**
               * @generated from protobuf field: types.Enum enum = 3
               */
              enum: Enum;
          }
        | {
              oneofKind: "struct";
              /**
               * @generated from protobuf field: types.Struct struct = 4
               */
              struct: Struct;
          }
        | {
              oneofKind: "tuple";
              /**
               * @generated from protobuf field: types.Array tuple = 5
               */
              tuple: Array$;
          }
        | {
              oneofKind: "array";
              /**
               * @generated from protobuf field: types.Array array = 6
               */
              array: Array$;
          }
        | {
              oneofKind: "bytearray";
              /**
               * @generated from protobuf field: string bytearray = 7
               */
              bytearray: string;
          }
        | {
              oneofKind: undefined;
          };
}
/**
 * @generated from protobuf message types.Member
 */
export interface Member {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: types.Ty ty = 2
     */
    ty?: Ty;
    /**
     * @generated from protobuf field: bool key = 3
     */
    key: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class EnumOption$Type extends MessageType<EnumOption> {
    constructor() {
        super("types.EnumOption", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ty", kind: "message", T: () => Ty },
        ]);
    }
    create(value?: PartialMessage<EnumOption>): EnumOption {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<EnumOption>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: EnumOption
    ): EnumOption {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* types.Ty ty */ 2:
                    message.ty = Ty.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.ty
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: EnumOption,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* types.Ty ty = 2; */
        if (message.ty)
            Ty.internalBinaryWrite(
                message.ty,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.EnumOption
 */
export const EnumOption = new EnumOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Enum$Type extends MessageType<Enum> {
    constructor() {
        super("types.Enum", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            {
                no: 2,
                name: "option",
                kind: "scalar",
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 3,
                name: "options",
                kind: "message",
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => EnumOption,
            },
        ]);
    }
    create(value?: PartialMessage<Enum>): Enum {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = "";
        message.option = 0;
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<Enum>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Enum
    ): Enum {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint32 option */ 2:
                    message.option = reader.uint32();
                    break;
                case /* repeated types.EnumOption options */ 3:
                    message.options.push(
                        EnumOption.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Enum,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint32 option = 2; */
        if (message.option !== 0)
            writer.tag(2, WireType.Varint).uint32(message.option);
        /* repeated types.EnumOption options = 3; */
        for (let i = 0; i < message.options.length; i++)
            EnumOption.internalBinaryWrite(
                message.options[i],
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Enum
 */
export const Enum = new Enum$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Primitive$Type extends MessageType<Primitive> {
    constructor() {
        super("types.Primitive", [
            {
                no: 1,
                name: "i8",
                kind: "scalar",
                oneof: "primitiveType",
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 2,
                name: "i16",
                kind: "scalar",
                oneof: "primitiveType",
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 3,
                name: "i32",
                kind: "scalar",
                oneof: "primitiveType",
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 4,
                name: "i64",
                kind: "scalar",
                oneof: "primitiveType",
                T: 3 /*ScalarType.INT64*/,
                L: 0 /*LongType.BIGINT*/,
            },
            {
                no: 5,
                name: "i128",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 6,
                name: "u8",
                kind: "scalar",
                oneof: "primitiveType",
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 7,
                name: "u16",
                kind: "scalar",
                oneof: "primitiveType",
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 8,
                name: "u32",
                kind: "scalar",
                oneof: "primitiveType",
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 9,
                name: "u64",
                kind: "scalar",
                oneof: "primitiveType",
                T: 4 /*ScalarType.UINT64*/,
                L: 0 /*LongType.BIGINT*/,
            },
            {
                no: 10,
                name: "u128",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 11,
                name: "u256",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 12,
                name: "bool",
                kind: "scalar",
                oneof: "primitiveType",
                T: 8 /*ScalarType.BOOL*/,
            },
            {
                no: 13,
                name: "felt252",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 14,
                name: "class_hash",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 15,
                name: "contract_address",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 16,
                name: "eth_address",
                kind: "scalar",
                oneof: "primitiveType",
                T: 12 /*ScalarType.BYTES*/,
            },
        ]);
    }
    create(value?: PartialMessage<Primitive>): Primitive {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.primitiveType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Primitive>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Primitive
    ): Primitive {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 i8 */ 1:
                    message.primitiveType = {
                        oneofKind: "i8",
                        i8: reader.int32(),
                    };
                    break;
                case /* int32 i16 */ 2:
                    message.primitiveType = {
                        oneofKind: "i16",
                        i16: reader.int32(),
                    };
                    break;
                case /* int32 i32 */ 3:
                    message.primitiveType = {
                        oneofKind: "i32",
                        i32: reader.int32(),
                    };
                    break;
                case /* int64 i64 */ 4:
                    message.primitiveType = {
                        oneofKind: "i64",
                        i64: reader.int64().toBigInt(),
                    };
                    break;
                case /* bytes i128 */ 5:
                    message.primitiveType = {
                        oneofKind: "i128",
                        i128: reader.bytes(),
                    };
                    break;
                case /* uint32 u8 */ 6:
                    message.primitiveType = {
                        oneofKind: "u8",
                        u8: reader.uint32(),
                    };
                    break;
                case /* uint32 u16 */ 7:
                    message.primitiveType = {
                        oneofKind: "u16",
                        u16: reader.uint32(),
                    };
                    break;
                case /* uint32 u32 */ 8:
                    message.primitiveType = {
                        oneofKind: "u32",
                        u32: reader.uint32(),
                    };
                    break;
                case /* uint64 u64 */ 9:
                    message.primitiveType = {
                        oneofKind: "u64",
                        u64: reader.uint64().toBigInt(),
                    };
                    break;
                case /* bytes u128 */ 10:
                    message.primitiveType = {
                        oneofKind: "u128",
                        u128: reader.bytes(),
                    };
                    break;
                case /* bytes u256 */ 11:
                    message.primitiveType = {
                        oneofKind: "u256",
                        u256: reader.bytes(),
                    };
                    break;
                case /* bool bool */ 12:
                    message.primitiveType = {
                        oneofKind: "bool",
                        bool: reader.bool(),
                    };
                    break;
                case /* bytes felt252 */ 13:
                    message.primitiveType = {
                        oneofKind: "felt252",
                        felt252: reader.bytes(),
                    };
                    break;
                case /* bytes class_hash */ 14:
                    message.primitiveType = {
                        oneofKind: "classHash",
                        classHash: reader.bytes(),
                    };
                    break;
                case /* bytes contract_address */ 15:
                    message.primitiveType = {
                        oneofKind: "contractAddress",
                        contractAddress: reader.bytes(),
                    };
                    break;
                case /* bytes eth_address */ 16:
                    message.primitiveType = {
                        oneofKind: "ethAddress",
                        ethAddress: reader.bytes(),
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Primitive,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* int32 i8 = 1; */
        if (message.primitiveType.oneofKind === "i8")
            writer.tag(1, WireType.Varint).int32(message.primitiveType.i8);
        /* int32 i16 = 2; */
        if (message.primitiveType.oneofKind === "i16")
            writer.tag(2, WireType.Varint).int32(message.primitiveType.i16);
        /* int32 i32 = 3; */
        if (message.primitiveType.oneofKind === "i32")
            writer.tag(3, WireType.Varint).int32(message.primitiveType.i32);
        /* int64 i64 = 4; */
        if (message.primitiveType.oneofKind === "i64")
            writer.tag(4, WireType.Varint).int64(message.primitiveType.i64);
        /* bytes i128 = 5; */
        if (message.primitiveType.oneofKind === "i128")
            writer
                .tag(5, WireType.LengthDelimited)
                .bytes(message.primitiveType.i128);
        /* uint32 u8 = 6; */
        if (message.primitiveType.oneofKind === "u8")
            writer.tag(6, WireType.Varint).uint32(message.primitiveType.u8);
        /* uint32 u16 = 7; */
        if (message.primitiveType.oneofKind === "u16")
            writer.tag(7, WireType.Varint).uint32(message.primitiveType.u16);
        /* uint32 u32 = 8; */
        if (message.primitiveType.oneofKind === "u32")
            writer.tag(8, WireType.Varint).uint32(message.primitiveType.u32);
        /* uint64 u64 = 9; */
        if (message.primitiveType.oneofKind === "u64")
            writer.tag(9, WireType.Varint).uint64(message.primitiveType.u64);
        /* bytes u128 = 10; */
        if (message.primitiveType.oneofKind === "u128")
            writer
                .tag(10, WireType.LengthDelimited)
                .bytes(message.primitiveType.u128);
        /* bytes u256 = 11; */
        if (message.primitiveType.oneofKind === "u256")
            writer
                .tag(11, WireType.LengthDelimited)
                .bytes(message.primitiveType.u256);
        /* bool bool = 12; */
        if (message.primitiveType.oneofKind === "bool")
            writer.tag(12, WireType.Varint).bool(message.primitiveType.bool);
        /* bytes felt252 = 13; */
        if (message.primitiveType.oneofKind === "felt252")
            writer
                .tag(13, WireType.LengthDelimited)
                .bytes(message.primitiveType.felt252);
        /* bytes class_hash = 14; */
        if (message.primitiveType.oneofKind === "classHash")
            writer
                .tag(14, WireType.LengthDelimited)
                .bytes(message.primitiveType.classHash);
        /* bytes contract_address = 15; */
        if (message.primitiveType.oneofKind === "contractAddress")
            writer
                .tag(15, WireType.LengthDelimited)
                .bytes(message.primitiveType.contractAddress);
        /* bytes eth_address = 16; */
        if (message.primitiveType.oneofKind === "ethAddress")
            writer
                .tag(16, WireType.LengthDelimited)
                .bytes(message.primitiveType.ethAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Primitive
 */
export const Primitive = new Primitive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Struct$Type extends MessageType<Struct> {
    constructor() {
        super("types.Struct", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            {
                no: 2,
                name: "children",
                kind: "message",
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => Member,
            },
        ]);
    }
    create(value?: PartialMessage<Struct>): Struct {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = "";
        message.children = [];
        if (value !== undefined)
            reflectionMergePartial<Struct>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Struct
    ): Struct {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated types.Member children */ 2:
                    message.children.push(
                        Member.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Struct,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated types.Member children = 2; */
        for (let i = 0; i < message.children.length; i++)
            Member.internalBinaryWrite(
                message.children[i],
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Struct
 */
export const Struct = new Struct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Array$$Type extends MessageType<Array$> {
    constructor() {
        super("types.Array", [
            {
                no: 1,
                name: "children",
                kind: "message",
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => Ty,
            },
        ]);
    }
    create(value?: PartialMessage<Array$>): Array$ {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.children = [];
        if (value !== undefined)
            reflectionMergePartial<Array$>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Array$
    ): Array$ {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated types.Ty children */ 1:
                    message.children.push(
                        Ty.internalBinaryRead(reader, reader.uint32(), options)
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Array$,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated types.Ty children = 1; */
        for (let i = 0; i < message.children.length; i++)
            Ty.internalBinaryWrite(
                message.children[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Array
 */
export const Array$ = new Array$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ty$Type extends MessageType<Ty> {
    constructor() {
        super("types.Ty", [
            {
                no: 2,
                name: "primitive",
                kind: "message",
                oneof: "tyType",
                T: () => Primitive,
            },
            {
                no: 3,
                name: "enum",
                kind: "message",
                oneof: "tyType",
                T: () => Enum,
            },
            {
                no: 4,
                name: "struct",
                kind: "message",
                oneof: "tyType",
                T: () => Struct,
            },
            {
                no: 5,
                name: "tuple",
                kind: "message",
                oneof: "tyType",
                T: () => Array$,
            },
            {
                no: 6,
                name: "array",
                kind: "message",
                oneof: "tyType",
                T: () => Array$,
            },
            {
                no: 7,
                name: "bytearray",
                kind: "scalar",
                oneof: "tyType",
                T: 9 /*ScalarType.STRING*/,
            },
        ]);
    }
    create(value?: PartialMessage<Ty>): Ty {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.tyType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Ty>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Ty
    ): Ty {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* types.Primitive primitive */ 2:
                    message.tyType = {
                        oneofKind: "primitive",
                        primitive: Primitive.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.tyType as any).primitive
                        ),
                    };
                    break;
                case /* types.Enum enum */ 3:
                    message.tyType = {
                        oneofKind: "enum",
                        enum: Enum.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.tyType as any).enum
                        ),
                    };
                    break;
                case /* types.Struct struct */ 4:
                    message.tyType = {
                        oneofKind: "struct",
                        struct: Struct.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.tyType as any).struct
                        ),
                    };
                    break;
                case /* types.Array tuple */ 5:
                    message.tyType = {
                        oneofKind: "tuple",
                        tuple: Array$.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.tyType as any).tuple
                        ),
                    };
                    break;
                case /* types.Array array */ 6:
                    message.tyType = {
                        oneofKind: "array",
                        array: Array$.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.tyType as any).array
                        ),
                    };
                    break;
                case /* string bytearray */ 7:
                    message.tyType = {
                        oneofKind: "bytearray",
                        bytearray: reader.string(),
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Ty,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* types.Primitive primitive = 2; */
        if (message.tyType.oneofKind === "primitive")
            Primitive.internalBinaryWrite(
                message.tyType.primitive,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* types.Enum enum = 3; */
        if (message.tyType.oneofKind === "enum")
            Enum.internalBinaryWrite(
                message.tyType.enum,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* types.Struct struct = 4; */
        if (message.tyType.oneofKind === "struct")
            Struct.internalBinaryWrite(
                message.tyType.struct,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* types.Array tuple = 5; */
        if (message.tyType.oneofKind === "tuple")
            Array$.internalBinaryWrite(
                message.tyType.tuple,
                writer.tag(5, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* types.Array array = 6; */
        if (message.tyType.oneofKind === "array")
            Array$.internalBinaryWrite(
                message.tyType.array,
                writer.tag(6, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* string bytearray = 7; */
        if (message.tyType.oneofKind === "bytearray")
            writer
                .tag(7, WireType.LengthDelimited)
                .string(message.tyType.bytearray);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Ty
 */
export const Ty = new Ty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member$Type extends MessageType<Member> {
    constructor() {
        super("types.Member", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ty", kind: "message", T: () => Ty },
            { no: 3, name: "key", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
        ]);
    }
    create(value?: PartialMessage<Member>): Member {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = "";
        message.key = false;
        if (value !== undefined)
            reflectionMergePartial<Member>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Member
    ): Member {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* types.Ty ty */ 2:
                    message.ty = Ty.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.ty
                    );
                    break;
                case /* bool key */ 3:
                    message.key = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: Member,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* types.Ty ty = 2; */
        if (message.ty)
            Ty.internalBinaryWrite(
                message.ty,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* bool key = 3; */
        if (message.key !== false)
            writer.tag(3, WireType.Varint).bool(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            );
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.Member
 */
export const Member = new Member$Type();
