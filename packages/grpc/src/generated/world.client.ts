// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,client_generic
// @generated from protobuf file "world.proto" (package "world", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { World } from "./world";
import type { PublishMessageBatchResponse } from "./world";
import type { PublishMessageBatchRequest } from "./world";
import type { PublishMessageResponse } from "./world";
import type { PublishMessageRequest } from "./world";
import type { RetrieveTokenCollectionsResponse } from "./world";
import type { RetrieveTokenCollectionsRequest } from "./world";
import type { RetrieveControllersResponse } from "./world";
import type { RetrieveControllersRequest } from "./world";
import type { SubscribeTransactionsResponse } from "./world";
import type { SubscribeTransactionsRequest } from "./world";
import type { RetrieveTransactionsResponse } from "./world";
import type { RetrieveTransactionsRequest } from "./world";
import type { RetrieveTokenBalancesResponse } from "./world";
import type { RetrieveTokenBalancesRequest } from "./world";
import type { RetrieveTokensResponse } from "./world";
import type { RetrieveTokensRequest } from "./world";
import type { SubscribeEventsResponse } from "./world";
import type { SubscribeEventsRequest } from "./world";
import type { RetrieveEventsResponse } from "./world";
import type { RetrieveEventsRequest } from "./world";
import type { RetrieveEventMessagesRequest } from "./world";
import type { UpdateTokenSubscriptionRequest } from "./world";
import type { SubscribeTokensResponse } from "./world";
import type { SubscribeTokensRequest } from "./world";
import type { UpdateTokenBalancesSubscriptionRequest } from "./world";
import type { SubscribeTokenBalancesResponse } from "./world";
import type { SubscribeTokenBalancesRequest } from "./world";
import type { UpdateEventMessagesSubscriptionRequest } from "./world";
import type { SubscribeEventMessagesRequest } from "./world";
import type { RetrieveEntitiesResponse } from "./world";
import type { RetrieveEntitiesRequest } from "./world";
import type { Empty } from "./google/protobuf/empty";
import type { UpdateEntitiesSubscriptionRequest } from "./world";
import type { SubscribeEntityResponse } from "./world";
import type { SubscribeEntitiesRequest } from "./world";
import type { WorldMetadataResponse } from "./world";
import type { WorldMetadataRequest } from "./world";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubscribeIndexerResponse } from "./world";
import type { SubscribeIndexerRequest } from "./world";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The World service provides information about the world.
 *
 * @generated from protobuf service world.World
 */
export interface IWorldClient {
    /**
     * Subscribes to updates about the indexer. Like the head block number, tps, etc.
     *
     * @generated from protobuf rpc: SubscribeIndexer
     */
    subscribeIndexer(
        input: SubscribeIndexerRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeIndexerRequest, SubscribeIndexerResponse>;
    /**
     * Retrieves metadata about the World including all the registered components and systems.
     *
     * @generated from protobuf rpc: WorldMetadata
     */
    worldMetadata(
        input: WorldMetadataRequest,
        options?: RpcOptions
    ): UnaryCall<WorldMetadataRequest, WorldMetadataResponse>;
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEntities
     */
    subscribeEntities(
        input: SubscribeEntitiesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse>;
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEntitiesSubscription
     */
    updateEntitiesSubscription(
        input: UpdateEntitiesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty>;
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEntities
     */
    retrieveEntities(
        input: RetrieveEntitiesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse>;
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEventMessages
     */
    subscribeEventMessages(
        input: SubscribeEventMessagesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeEventMessagesRequest,
        SubscribeEntityResponse
    >;
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEventMessagesSubscription
     */
    updateEventMessagesSubscription(
        input: UpdateEventMessagesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateEventMessagesSubscriptionRequest, Empty>;
    /**
     * Subscribe to token balance updates.
     *
     * @generated from protobuf rpc: SubscribeTokenBalances
     */
    subscribeTokenBalances(
        input: SubscribeTokenBalancesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeTokenBalancesRequest,
        SubscribeTokenBalancesResponse
    >;
    /**
     * Update token balance subscription
     *
     * @generated from protobuf rpc: UpdateTokenBalancesSubscription
     */
    updateTokenBalancesSubscription(
        input: UpdateTokenBalancesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty>;
    /**
     * Subscribe to token updates.
     *
     * @generated from protobuf rpc: SubscribeTokens
     */
    subscribeTokens(
        input: SubscribeTokensRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse>;
    /**
     * Update token subscription
     *
     * @generated from protobuf rpc: UpdateTokensSubscription
     */
    updateTokensSubscription(
        input: UpdateTokenSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateTokenSubscriptionRequest, Empty>;
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEventMessages
     */
    retrieveEventMessages(
        input: RetrieveEventMessagesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEventMessagesRequest, RetrieveEntitiesResponse>;
    /**
     * Retrieve events
     *
     * @generated from protobuf rpc: RetrieveEvents
     */
    retrieveEvents(
        input: RetrieveEventsRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse>;
    /**
     * Subscribe to events
     *
     * @generated from protobuf rpc: SubscribeEvents
     */
    subscribeEvents(
        input: SubscribeEventsRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse>;
    /**
     * Retrieve tokens
     *
     * @generated from protobuf rpc: RetrieveTokens
     */
    retrieveTokens(
        input: RetrieveTokensRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse>;
    /**
     * Retrieve token balances
     *
     * @generated from protobuf rpc: RetrieveTokenBalances
     */
    retrieveTokenBalances(
        input: RetrieveTokenBalancesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse>;
    /**
     * Retrieve transactions
     *
     * @generated from protobuf rpc: RetrieveTransactions
     */
    retrieveTransactions(
        input: RetrieveTransactionsRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse>;
    /**
     * Subscribe to transactions
     *
     * @generated from protobuf rpc: SubscribeTransactions
     */
    subscribeTransactions(
        input: SubscribeTransactionsRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeTransactionsRequest,
        SubscribeTransactionsResponse
    >;
    /**
     * Retrieve controllers
     *
     * @generated from protobuf rpc: RetrieveControllers
     */
    retrieveControllers(
        input: RetrieveControllersRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse>;
    /**
     * Retrieve tokens collections
     *
     * @generated from protobuf rpc: RetrieveTokenCollections
     */
    retrieveTokenCollections(
        input: RetrieveTokenCollectionsRequest,
        options?: RpcOptions
    ): UnaryCall<
        RetrieveTokenCollectionsRequest,
        RetrieveTokenCollectionsResponse
    >;
    /**
     * Publish a torii offchain message
     *
     * @generated from protobuf rpc: PublishMessage
     */
    publishMessage(
        input: PublishMessageRequest,
        options?: RpcOptions
    ): UnaryCall<PublishMessageRequest, PublishMessageResponse>;
    /**
     * Publish a set of torii offchain messages
     *
     * @generated from protobuf rpc: PublishMessageBatch
     */
    publishMessageBatch(
        input: PublishMessageBatchRequest,
        options?: RpcOptions
    ): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse>;
}
/**
 * The World service provides information about the world.
 *
 * @generated from protobuf service world.World
 */
export class WorldClient implements IWorldClient, ServiceInfo {
    typeName = World.typeName;
    methods = World.methods;
    options = World.options;
    constructor(private readonly _transport: RpcTransport) {}
    /**
     * Subscribes to updates about the indexer. Like the head block number, tps, etc.
     *
     * @generated from protobuf rpc: SubscribeIndexer
     */
    subscribeIndexer(
        input: SubscribeIndexerRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeIndexerRequest, SubscribeIndexerResponse> {
        const method = this.methods[0],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            SubscribeIndexerRequest,
            SubscribeIndexerResponse
        >("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Retrieves metadata about the World including all the registered components and systems.
     *
     * @generated from protobuf rpc: WorldMetadata
     */
    worldMetadata(
        input: WorldMetadataRequest,
        options?: RpcOptions
    ): UnaryCall<WorldMetadataRequest, WorldMetadataResponse> {
        const method = this.methods[1],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<WorldMetadataRequest, WorldMetadataResponse>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEntities
     */
    subscribeEntities(
        input: SubscribeEntitiesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse> {
        const method = this.methods[2],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            SubscribeEntitiesRequest,
            SubscribeEntityResponse
        >("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEntitiesSubscription
     */
    updateEntitiesSubscription(
        input: UpdateEntitiesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty> {
        const method = this.methods[3],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEntitiesSubscriptionRequest, Empty>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEntities
     */
    retrieveEntities(
        input: RetrieveEntitiesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse> {
        const method = this.methods[4],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveEntitiesRequest,
            RetrieveEntitiesResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEventMessages
     */
    subscribeEventMessages(
        input: SubscribeEventMessagesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeEventMessagesRequest,
        SubscribeEntityResponse
    > {
        const method = this.methods[5],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            SubscribeEventMessagesRequest,
            SubscribeEntityResponse
        >("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEventMessagesSubscription
     */
    updateEventMessagesSubscription(
        input: UpdateEventMessagesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateEventMessagesSubscriptionRequest, Empty> {
        const method = this.methods[6],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEventMessagesSubscriptionRequest, Empty>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Subscribe to token balance updates.
     *
     * @generated from protobuf rpc: SubscribeTokenBalances
     */
    subscribeTokenBalances(
        input: SubscribeTokenBalancesRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeTokenBalancesRequest,
        SubscribeTokenBalancesResponse
    > {
        const method = this.methods[7],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            SubscribeTokenBalancesRequest,
            SubscribeTokenBalancesResponse
        >("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update token balance subscription
     *
     * @generated from protobuf rpc: UpdateTokenBalancesSubscription
     */
    updateTokenBalancesSubscription(
        input: UpdateTokenBalancesSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty> {
        const method = this.methods[8],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTokenBalancesSubscriptionRequest, Empty>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Subscribe to token updates.
     *
     * @generated from protobuf rpc: SubscribeTokens
     */
    subscribeTokens(
        input: SubscribeTokensRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse> {
        const method = this.methods[9],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTokensRequest, SubscribeTokensResponse>(
            "serverStreaming",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Update token subscription
     *
     * @generated from protobuf rpc: UpdateTokensSubscription
     */
    updateTokensSubscription(
        input: UpdateTokenSubscriptionRequest,
        options?: RpcOptions
    ): UnaryCall<UpdateTokenSubscriptionRequest, Empty> {
        const method = this.methods[10],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTokenSubscriptionRequest, Empty>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEventMessages
     */
    retrieveEventMessages(
        input: RetrieveEventMessagesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEventMessagesRequest, RetrieveEntitiesResponse> {
        const method = this.methods[11],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveEventMessagesRequest,
            RetrieveEntitiesResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve events
     *
     * @generated from protobuf rpc: RetrieveEvents
     */
    retrieveEvents(
        input: RetrieveEventsRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse> {
        const method = this.methods[12],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveEventsRequest, RetrieveEventsResponse>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Subscribe to events
     *
     * @generated from protobuf rpc: SubscribeEvents
     */
    subscribeEvents(
        input: SubscribeEventsRequest,
        options?: RpcOptions
    ): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse> {
        const method = this.methods[13],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeEventsRequest, SubscribeEventsResponse>(
            "serverStreaming",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Retrieve tokens
     *
     * @generated from protobuf rpc: RetrieveTokens
     */
    retrieveTokens(
        input: RetrieveTokensRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse> {
        const method = this.methods[14],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTokensRequest, RetrieveTokensResponse>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Retrieve token balances
     *
     * @generated from protobuf rpc: RetrieveTokenBalances
     */
    retrieveTokenBalances(
        input: RetrieveTokenBalancesRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse> {
        const method = this.methods[15],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveTokenBalancesRequest,
            RetrieveTokenBalancesResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve transactions
     *
     * @generated from protobuf rpc: RetrieveTransactions
     */
    retrieveTransactions(
        input: RetrieveTransactionsRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse> {
        const method = this.methods[16],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveTransactionsRequest,
            RetrieveTransactionsResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to transactions
     *
     * @generated from protobuf rpc: SubscribeTransactions
     */
    subscribeTransactions(
        input: SubscribeTransactionsRequest,
        options?: RpcOptions
    ): ServerStreamingCall<
        SubscribeTransactionsRequest,
        SubscribeTransactionsResponse
    > {
        const method = this.methods[17],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            SubscribeTransactionsRequest,
            SubscribeTransactionsResponse
        >("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Retrieve controllers
     *
     * @generated from protobuf rpc: RetrieveControllers
     */
    retrieveControllers(
        input: RetrieveControllersRequest,
        options?: RpcOptions
    ): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse> {
        const method = this.methods[18],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveControllersRequest,
            RetrieveControllersResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve tokens collections
     *
     * @generated from protobuf rpc: RetrieveTokenCollections
     */
    retrieveTokenCollections(
        input: RetrieveTokenCollectionsRequest,
        options?: RpcOptions
    ): UnaryCall<
        RetrieveTokenCollectionsRequest,
        RetrieveTokenCollectionsResponse
    > {
        const method = this.methods[19],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            RetrieveTokenCollectionsRequest,
            RetrieveTokenCollectionsResponse
        >("unary", this._transport, method, opt, input);
    }
    /**
     * Publish a torii offchain message
     *
     * @generated from protobuf rpc: PublishMessage
     */
    publishMessage(
        input: PublishMessageRequest,
        options?: RpcOptions
    ): UnaryCall<PublishMessageRequest, PublishMessageResponse> {
        const method = this.methods[20],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishMessageRequest, PublishMessageResponse>(
            "unary",
            this._transport,
            method,
            opt,
            input
        );
    }
    /**
     * Publish a set of torii offchain messages
     *
     * @generated from protobuf rpc: PublishMessageBatch
     */
    publishMessageBatch(
        input: PublishMessageBatchRequest,
        options?: RpcOptions
    ): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse> {
        const method = this.methods[21],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<
            PublishMessageBatchRequest,
            PublishMessageBatchResponse
        >("unary", this._transport, method, opt, input);
    }
}
