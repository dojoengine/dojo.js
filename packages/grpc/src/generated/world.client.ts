// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,output_typescript,use_proto_field_name,client_generic
// @generated from protobuf file "world.proto" (package "world", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { World } from "./world";
import type { SqlQueryResponse } from "./types";
import type { SqlQueryRequest } from "./types";
import type { PublishMessageBatchResponse } from "./world";
import type { PublishMessageBatchRequest } from "./world";
import type { PublishMessageResponse } from "./world";
import type { PublishMessageRequest } from "./world";
import type { UpdateActivitiesSubscriptionRequest } from "./world";
import type { SubscribeActivitiesResponse } from "./world";
import type { SubscribeActivitiesRequest } from "./world";
import type { RetrieveActivitiesResponse } from "./world";
import type { RetrieveActivitiesRequest } from "./world";
import type { UpdateAggregationsSubscriptionResponse } from "./world";
import type { UpdateAggregationsSubscriptionRequest } from "./world";
import type { SubscribeAggregationsResponse } from "./world";
import type { SubscribeAggregationsRequest } from "./world";
import type { RetrieveAggregationsResponse } from "./world";
import type { RetrieveAggregationsRequest } from "./world";
import type { RetrieveTokenContractsResponse } from "./world";
import type { RetrieveTokenContractsRequest } from "./world";
import type { RetrieveContractsResponse } from "./world";
import type { RetrieveContractsRequest } from "./world";
import type { RetrieveControllersResponse } from "./world";
import type { RetrieveControllersRequest } from "./world";
import type { SubscribeTransactionsResponse } from "./world";
import type { SubscribeTransactionsRequest } from "./world";
import type { RetrieveTransactionsResponse } from "./world";
import type { RetrieveTransactionsRequest } from "./world";
import type { RetrieveTokenBalancesResponse } from "./world";
import type { RetrieveTokenBalancesRequest } from "./world";
import type { RetrieveTokenTransfersResponse } from "./world";
import type { RetrieveTokenTransfersRequest } from "./world";
import type { RetrieveTokensResponse } from "./world";
import type { RetrieveTokensRequest } from "./world";
import type { SubscribeEventsResponse } from "./world";
import type { SubscribeEventsRequest } from "./world";
import type { RetrieveEventsResponse } from "./world";
import type { RetrieveEventsRequest } from "./world";
import type { UpdateTokenTransfersSubscriptionRequest } from "./world";
import type { SubscribeTokenTransfersResponse } from "./world";
import type { SubscribeTokenTransfersRequest } from "./world";
import type { UpdateTokenSubscriptionRequest } from "./world";
import type { SubscribeTokensResponse } from "./world";
import type { SubscribeTokensRequest } from "./world";
import type { UpdateTokenBalancesSubscriptionRequest } from "./world";
import type { SubscribeTokenBalancesResponse } from "./world";
import type { SubscribeTokenBalancesRequest } from "./world";
import type { RetrieveEntitiesResponse } from "./world";
import type { RetrieveEntitiesRequest } from "./world";
import type { Empty } from "./google/protobuf/empty";
import type { UpdateEntitiesSubscriptionRequest } from "./world";
import type { SubscribeEntityResponse } from "./world";
import type { SubscribeEntitiesRequest } from "./world";
import type { WorldsResponse } from "./world";
import type { WorldsRequest } from "./world";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubscribeContractsResponse } from "./world";
import type { SubscribeContractsRequest } from "./world";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The World service provides information about the world.
 *
 * @generated from protobuf service world.World
 */
export interface IWorldClient {
    /**
     * Subscribes to updates about contracts. Like the head block number, tps, etc.
     *
     * @generated from protobuf rpc: SubscribeContracts
     */
    subscribeContracts(input: SubscribeContractsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeContractsRequest, SubscribeContractsResponse>;
    /**
     * Retrieves metadata about the World including all the registered components and systems.
     *
     * @generated from protobuf rpc: Worlds
     */
    worlds(input: WorldsRequest, options?: RpcOptions): UnaryCall<WorldsRequest, WorldsResponse>;
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEntities
     */
    subscribeEntities(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse>;
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEntitiesSubscription
     */
    updateEntitiesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty>;
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEntities
     */
    retrieveEntities(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse>;
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEventMessages
     */
    subscribeEventMessages(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse>;
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEventMessagesSubscription
     */
    updateEventMessagesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty>;
    /**
     * Subscribe to token balance updates.
     *
     * @generated from protobuf rpc: SubscribeTokenBalances
     */
    subscribeTokenBalances(input: SubscribeTokenBalancesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse>;
    /**
     * Update token balance subscription
     *
     * @generated from protobuf rpc: UpdateTokenBalancesSubscription
     */
    updateTokenBalancesSubscription(input: UpdateTokenBalancesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty>;
    /**
     * Subscribe to token updates.
     *
     * @generated from protobuf rpc: SubscribeTokens
     */
    subscribeTokens(input: SubscribeTokensRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse>;
    /**
     * Update token subscription
     *
     * @generated from protobuf rpc: UpdateTokensSubscription
     */
    updateTokensSubscription(input: UpdateTokenSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenSubscriptionRequest, Empty>;
    /**
     * Subscribe to token transfer updates.
     *
     * @generated from protobuf rpc: SubscribeTokenTransfers
     */
    subscribeTokenTransfers(input: SubscribeTokenTransfersRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenTransfersRequest, SubscribeTokenTransfersResponse>;
    /**
     * Update token transfer subscription
     *
     * @generated from protobuf rpc: UpdateTokenTransfersSubscription
     */
    updateTokenTransfersSubscription(input: UpdateTokenTransfersSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenTransfersSubscriptionRequest, Empty>;
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEventMessages
     */
    retrieveEventMessages(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse>;
    /**
     * Retrieve events
     *
     * @generated from protobuf rpc: RetrieveEvents
     */
    retrieveEvents(input: RetrieveEventsRequest, options?: RpcOptions): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse>;
    /**
     * Subscribe to events
     *
     * @generated from protobuf rpc: SubscribeEvents
     */
    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse>;
    /**
     * Retrieve tokens
     *
     * @generated from protobuf rpc: RetrieveTokens
     */
    retrieveTokens(input: RetrieveTokensRequest, options?: RpcOptions): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse>;
    /**
     * Retrieve token transfers
     *
     * @generated from protobuf rpc: RetrieveTokenTransfers
     */
    retrieveTokenTransfers(input: RetrieveTokenTransfersRequest, options?: RpcOptions): UnaryCall<RetrieveTokenTransfersRequest, RetrieveTokenTransfersResponse>;
    /**
     * Retrieve token balances
     *
     * @generated from protobuf rpc: RetrieveTokenBalances
     */
    retrieveTokenBalances(input: RetrieveTokenBalancesRequest, options?: RpcOptions): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse>;
    /**
     * Retrieve transactions
     *
     * @generated from protobuf rpc: RetrieveTransactions
     */
    retrieveTransactions(input: RetrieveTransactionsRequest, options?: RpcOptions): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse>;
    /**
     * Subscribe to transactions
     *
     * @generated from protobuf rpc: SubscribeTransactions
     */
    subscribeTransactions(input: SubscribeTransactionsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionsRequest, SubscribeTransactionsResponse>;
    /**
     * Retrieve controllers
     *
     * @generated from protobuf rpc: RetrieveControllers
     */
    retrieveControllers(input: RetrieveControllersRequest, options?: RpcOptions): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse>;
    /**
     * Retrieve contracts
     *
     * @generated from protobuf rpc: RetrieveContracts
     */
    retrieveContracts(input: RetrieveContractsRequest, options?: RpcOptions): UnaryCall<RetrieveContractsRequest, RetrieveContractsResponse>;
    /**
     * Retrieve token contracts
     *
     * @generated from protobuf rpc: RetrieveTokenContracts
     */
    retrieveTokenContracts(input: RetrieveTokenContractsRequest, options?: RpcOptions): UnaryCall<RetrieveTokenContractsRequest, RetrieveTokenContractsResponse>;
    /**
     * Retrieve aggregations (leaderboards, stats, rankings)
     *
     * @generated from protobuf rpc: RetrieveAggregations
     */
    retrieveAggregations(input: RetrieveAggregationsRequest, options?: RpcOptions): UnaryCall<RetrieveAggregationsRequest, RetrieveAggregationsResponse>;
    /**
     * Subscribe to aggregation updates (leaderboards, stats, rankings)
     *
     * @generated from protobuf rpc: SubscribeAggregations
     */
    subscribeAggregations(input: SubscribeAggregationsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAggregationsRequest, SubscribeAggregationsResponse>;
    /**
     * Update an aggregations subscription
     *
     * @generated from protobuf rpc: UpdateAggregationsSubscription
     */
    updateAggregationsSubscription(input: UpdateAggregationsSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateAggregationsSubscriptionRequest, UpdateAggregationsSubscriptionResponse>;
    /**
     * Retrieve activities (user session tracking)
     *
     * @generated from protobuf rpc: RetrieveActivities
     */
    retrieveActivities(input: RetrieveActivitiesRequest, options?: RpcOptions): UnaryCall<RetrieveActivitiesRequest, RetrieveActivitiesResponse>;
    /**
     * Subscribe to activity updates (user session tracking)
     *
     * @generated from protobuf rpc: SubscribeActivities
     */
    subscribeActivities(input: SubscribeActivitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActivitiesRequest, SubscribeActivitiesResponse>;
    /**
     * Update an activities subscription
     *
     * @generated from protobuf rpc: UpdateActivitiesSubscription
     */
    updateActivitiesSubscription(input: UpdateActivitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateActivitiesSubscriptionRequest, Empty>;
    /**
     * Publish a torii offchain message
     *
     * @generated from protobuf rpc: PublishMessage
     */
    publishMessage(input: PublishMessageRequest, options?: RpcOptions): UnaryCall<PublishMessageRequest, PublishMessageResponse>;
    /**
     * Publish a set of torii offchain messages
     *
     * @generated from protobuf rpc: PublishMessageBatch
     */
    publishMessageBatch(input: PublishMessageBatchRequest, options?: RpcOptions): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse>;
    /**
     * Execute a SQL query and return results
     *
     * @generated from protobuf rpc: ExecuteSql
     */
    executeSql(input: SqlQueryRequest, options?: RpcOptions): UnaryCall<SqlQueryRequest, SqlQueryResponse>;
}
/**
 * The World service provides information about the world.
 *
 * @generated from protobuf service world.World
 */
export class WorldClient implements IWorldClient, ServiceInfo {
    typeName = World.typeName;
    methods = World.methods;
    options = World.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribes to updates about contracts. Like the head block number, tps, etc.
     *
     * @generated from protobuf rpc: SubscribeContracts
     */
    subscribeContracts(input: SubscribeContractsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeContractsRequest, SubscribeContractsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeContractsRequest, SubscribeContractsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Retrieves metadata about the World including all the registered components and systems.
     *
     * @generated from protobuf rpc: Worlds
     */
    worlds(input: WorldsRequest, options?: RpcOptions): UnaryCall<WorldsRequest, WorldsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorldsRequest, WorldsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEntities
     */
    subscribeEntities(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeEntitiesRequest, SubscribeEntityResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEntitiesSubscription
     */
    updateEntitiesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEntitiesSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEntities
     */
    retrieveEntities(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveEntitiesRequest, RetrieveEntitiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to entity updates.
     *
     * @generated from protobuf rpc: SubscribeEventMessages
     */
    subscribeEventMessages(input: SubscribeEntitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEntitiesRequest, SubscribeEntityResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeEntitiesRequest, SubscribeEntityResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update entity subscription
     *
     * @generated from protobuf rpc: UpdateEventMessagesSubscription
     */
    updateEventMessagesSubscription(input: UpdateEntitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateEntitiesSubscriptionRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEntitiesSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to token balance updates.
     *
     * @generated from protobuf rpc: SubscribeTokenBalances
     */
    subscribeTokenBalances(input: SubscribeTokenBalancesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTokenBalancesRequest, SubscribeTokenBalancesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update token balance subscription
     *
     * @generated from protobuf rpc: UpdateTokenBalancesSubscription
     */
    updateTokenBalancesSubscription(input: UpdateTokenBalancesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenBalancesSubscriptionRequest, Empty> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTokenBalancesSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to token updates.
     *
     * @generated from protobuf rpc: SubscribeTokens
     */
    subscribeTokens(input: SubscribeTokensRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokensRequest, SubscribeTokensResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTokensRequest, SubscribeTokensResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update token subscription
     *
     * @generated from protobuf rpc: UpdateTokensSubscription
     */
    updateTokensSubscription(input: UpdateTokenSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenSubscriptionRequest, Empty> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTokenSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to token transfer updates.
     *
     * @generated from protobuf rpc: SubscribeTokenTransfers
     */
    subscribeTokenTransfers(input: SubscribeTokenTransfersRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTokenTransfersRequest, SubscribeTokenTransfersResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTokenTransfersRequest, SubscribeTokenTransfersResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update token transfer subscription
     *
     * @generated from protobuf rpc: UpdateTokenTransfersSubscription
     */
    updateTokenTransfersSubscription(input: UpdateTokenTransfersSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateTokenTransfersSubscriptionRequest, Empty> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTokenTransfersSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve entities
     *
     * @generated from protobuf rpc: RetrieveEventMessages
     */
    retrieveEventMessages(input: RetrieveEntitiesRequest, options?: RpcOptions): UnaryCall<RetrieveEntitiesRequest, RetrieveEntitiesResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveEntitiesRequest, RetrieveEntitiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve events
     *
     * @generated from protobuf rpc: RetrieveEvents
     */
    retrieveEvents(input: RetrieveEventsRequest, options?: RpcOptions): UnaryCall<RetrieveEventsRequest, RetrieveEventsResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveEventsRequest, RetrieveEventsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to events
     *
     * @generated from protobuf rpc: SubscribeEvents
     */
    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, SubscribeEventsResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeEventsRequest, SubscribeEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Retrieve tokens
     *
     * @generated from protobuf rpc: RetrieveTokens
     */
    retrieveTokens(input: RetrieveTokensRequest, options?: RpcOptions): UnaryCall<RetrieveTokensRequest, RetrieveTokensResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTokensRequest, RetrieveTokensResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve token transfers
     *
     * @generated from protobuf rpc: RetrieveTokenTransfers
     */
    retrieveTokenTransfers(input: RetrieveTokenTransfersRequest, options?: RpcOptions): UnaryCall<RetrieveTokenTransfersRequest, RetrieveTokenTransfersResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTokenTransfersRequest, RetrieveTokenTransfersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve token balances
     *
     * @generated from protobuf rpc: RetrieveTokenBalances
     */
    retrieveTokenBalances(input: RetrieveTokenBalancesRequest, options?: RpcOptions): UnaryCall<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTokenBalancesRequest, RetrieveTokenBalancesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve transactions
     *
     * @generated from protobuf rpc: RetrieveTransactions
     */
    retrieveTransactions(input: RetrieveTransactionsRequest, options?: RpcOptions): UnaryCall<RetrieveTransactionsRequest, RetrieveTransactionsResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTransactionsRequest, RetrieveTransactionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to transactions
     *
     * @generated from protobuf rpc: SubscribeTransactions
     */
    subscribeTransactions(input: SubscribeTransactionsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionsRequest, SubscribeTransactionsResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTransactionsRequest, SubscribeTransactionsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Retrieve controllers
     *
     * @generated from protobuf rpc: RetrieveControllers
     */
    retrieveControllers(input: RetrieveControllersRequest, options?: RpcOptions): UnaryCall<RetrieveControllersRequest, RetrieveControllersResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveControllersRequest, RetrieveControllersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve contracts
     *
     * @generated from protobuf rpc: RetrieveContracts
     */
    retrieveContracts(input: RetrieveContractsRequest, options?: RpcOptions): UnaryCall<RetrieveContractsRequest, RetrieveContractsResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveContractsRequest, RetrieveContractsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve token contracts
     *
     * @generated from protobuf rpc: RetrieveTokenContracts
     */
    retrieveTokenContracts(input: RetrieveTokenContractsRequest, options?: RpcOptions): UnaryCall<RetrieveTokenContractsRequest, RetrieveTokenContractsResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveTokenContractsRequest, RetrieveTokenContractsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve aggregations (leaderboards, stats, rankings)
     *
     * @generated from protobuf rpc: RetrieveAggregations
     */
    retrieveAggregations(input: RetrieveAggregationsRequest, options?: RpcOptions): UnaryCall<RetrieveAggregationsRequest, RetrieveAggregationsResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveAggregationsRequest, RetrieveAggregationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to aggregation updates (leaderboards, stats, rankings)
     *
     * @generated from protobuf rpc: SubscribeAggregations
     */
    subscribeAggregations(input: SubscribeAggregationsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAggregationsRequest, SubscribeAggregationsResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeAggregationsRequest, SubscribeAggregationsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update an aggregations subscription
     *
     * @generated from protobuf rpc: UpdateAggregationsSubscription
     */
    updateAggregationsSubscription(input: UpdateAggregationsSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateAggregationsSubscriptionRequest, UpdateAggregationsSubscriptionResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateAggregationsSubscriptionRequest, UpdateAggregationsSubscriptionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve activities (user session tracking)
     *
     * @generated from protobuf rpc: RetrieveActivities
     */
    retrieveActivities(input: RetrieveActivitiesRequest, options?: RpcOptions): UnaryCall<RetrieveActivitiesRequest, RetrieveActivitiesResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveActivitiesRequest, RetrieveActivitiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to activity updates (user session tracking)
     *
     * @generated from protobuf rpc: SubscribeActivities
     */
    subscribeActivities(input: SubscribeActivitiesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActivitiesRequest, SubscribeActivitiesResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeActivitiesRequest, SubscribeActivitiesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Update an activities subscription
     *
     * @generated from protobuf rpc: UpdateActivitiesSubscription
     */
    updateActivitiesSubscription(input: UpdateActivitiesSubscriptionRequest, options?: RpcOptions): UnaryCall<UpdateActivitiesSubscriptionRequest, Empty> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateActivitiesSubscriptionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish a torii offchain message
     *
     * @generated from protobuf rpc: PublishMessage
     */
    publishMessage(input: PublishMessageRequest, options?: RpcOptions): UnaryCall<PublishMessageRequest, PublishMessageResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishMessageRequest, PublishMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish a set of torii offchain messages
     *
     * @generated from protobuf rpc: PublishMessageBatch
     */
    publishMessageBatch(input: PublishMessageBatchRequest, options?: RpcOptions): UnaryCall<PublishMessageBatchRequest, PublishMessageBatchResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishMessageBatchRequest, PublishMessageBatchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Execute a SQL query and return results
     *
     * @generated from protobuf rpc: ExecuteSql
     */
    executeSql(input: SqlQueryRequest, options?: RpcOptions): UnaryCall<SqlQueryRequest, SqlQueryResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<SqlQueryRequest, SqlQueryResponse>("unary", this._transport, method, opt, input);
    }
}
